/*
 * gvNIX. Spring Roo based RAD tool for Conselleria d'Infraestructures
 * i Transport - Generalitat Valenciana
 * Copyright (C) 2010 CIT - Generalitat Valenciana
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ${entity_package};

import java.security.MessageDigest;

import javax.persistence.OptimisticLockException;
import javax.persistence.PostLoad;

import org.springframework.transaction.annotation.Transactional;

/**
 * <p><b>Optimistic Concurrency Control of gvNIX</b></p>
 *
 */
privileged aspect ${entity_class}_gvnix_persistence_occ {

    declare precedence: ${entity_class}_gvnix_persistence_occ, ${entity_class}_Roo_Entity;

    transient static MessageDigest MESSAGE_DIGEST;


    private static MessageDigest getMessageDigest() {
        if (MESSAGE_DIGEST == null) {
            try {
                MESSAGE_DIGEST = MessageDigest.getInstance("${digest_method}");
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        return MESSAGE_DIGEST;
    }


    @Transactional
    public void ${entity_class}.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.checkConcurrency(null);
            this.entityManager.remove(this);
        } else {
            ${entity_class} attached = this.entityManager.find(${entity_class}.class, this.${id_field});
            this.checkConcurrency(attached);
            this.entityManager.remove(attached);
        }
    }

    @Transactional
    public void ${entity_class}.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.checkConcurrency(null);
        ${entity_class} merged = this.entityManager.merge(this);
        this.entityManager.flush();
        this.${id_field} = merged.${id_accessor}();
    }

    public void ${entity_class}.checkConcurrency(${entity_class} attached) {
        if (attached == null){
            attached = this.entityManager.find(${entity_class}.class, this.${id_field});
            if (attached == null) {
			    // TODO Customize this Exception to add more information
                throw new OptimisticLockException(
                    "${entity_class} has been deleted (${id_field}: " + this.${id_field} + ")");
            }
        }
        if (this.${checksum_field} != null && // We haven the old checksum and
            !this.${checksum_field}.equals(attached.${checksum_field})) { // checksum is not equals
	    	// TODO Customize this Exception to add more information
	    	throw new OptimisticLockException(
		    	"${entity_class} has been changed (${id_field}: " + this.${id_field} + ")");
		}
    }


    @PostLoad
    public void ${entity_class}.loadChecksum() {
        if (this.${checksum_field} == null) {
            this.${checksum_field} = this.checksumDigest();
        }
    }

    public String ${entity_class}.checksumDigest() {
        final String nullstr = "__null__";
        final String separator = "#$#";
        StringBuilder sb = new StringBuilder();

${local_fields_to_String}

        byte[] digest = getMessageDigest().digest(sb.toString().getBytes());

        // TODO optimize this code
        StringBuilder sb2 = new StringBuilder(digest.length * 2);
        for (int i = 0; i < digest.length; i++) {
            sb2.append(Integer.toString((digest[i] & 0xff) + 0x100, 16)
                .substring(1));
        }
        return sb2.toString();
    }
}
