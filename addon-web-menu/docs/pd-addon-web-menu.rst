=========================================================
 gvNIX add-on web menu description
=========================================================

:Project:   gvNIX. Spring Roo based RAD tool
:Copyright: Conselleria d'Infraestructures i Transport - Generalitat Valenciana
:Author:    DiSiD Technologies, S.L.
:Revision:  $Rev$
:Date:      $Date$

This work is licensed under the Creative Commons Attribution-Share Alike 3.0    Unported License. To view a copy of this license, visit
http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
Creative Commons, 171 Second Street, Suite 300, San Francisco, California,
94105, USA.

.. contents::
   :depth: 2
   :backlinks: none

.. |date| date::

Introduction
===============

This document contents relative to this add-on.

Definitions
=================

Here you have an definition's list we going to use:

* `Page`_: URL representation (It could be interal or external).
* `Group`_: `Page`_ container. The contained pages could be pages or groups.
* `Menu`_: A page tree.
* `Context Menu`_ : Menu sub-view rendered depending current navigator `page`_.
* `Menu item`_: Contains information needed to access and identify a `Page`_.


Page
--------

This has to have a unique dynamic application contents URL. No problem about static or external destinations. There is the same handler for internal and external URLs. A Page haven't children.

The URL comparison is made by destination and parameters names. Parameters values are ignored.

Group
-------

Sort of `Page`_ that has children. It may have a destination URL with the same `Page`_'s restrictions.

Menu
------

A Set of `Page`_'s and `Group`_'s.

Context Menu
-------------

A sort of `Menu`_ that contents is a subset of `Menu` items relative to the current page. This behavior is activated will be activated by a parameter.

The contents to show is defined by another parameter that sets the strategy to use. This strategy must identify current menu position in menu and generate a menu item list to show.


Menu Item
------------

`Menu`_ element. It could be a `Page`_ or a `Group`_.




Requirements
=============

This add-on have to install and manage the application menu of Roo projects.

In general this must to solve this features:

* list menu tree
* add pages with more than two levels
* remove or hide menu items
* relocate menu items
* adds Roo web scaffold menu items automatically
* Support context menus.

Additional features could be:

* Synchronization items menu roles with controller Spring Security annotations.
* Menu model from DB source.
* ITDs for menu classes.
* Conditional visualization based on Spring EL (expressions).

In first versions of this add-on we trying to use Structs-menu library but we found that will be better if we use our own model and visualization. The main argument of that is the low Roo integration that we can get with this library.

So, we need to create a library to load and use our own menu data model. This library will be used in runtime by target projects so this must be in a public maven repository.

For Menu render this will use standard Roo display way based on *tagx*. If it's possible we'll use standard menu *tagx* generated by Roo.


Analysis
=========

We can split this sections in three parts:

* `Menu data model`_: Classes to load menu data model and make it available in page context.
* `Installation`_: what we need to do to prepare the project for new menus system.
* `Standard Roo actions compatibility`_: Assure that we don't lose any Roo features.
* `Project dependency checks`_: Checks if Spring Security is installed or not. This affect to menu's render.
* `Menu tree manage`_.
* `Additional features`_.


Menu data model
---------------------

In runtime we need some classes to load and have available menu structure and information of the menu.

This classes will be created in target project. we'll have templates in add-on to generate it in a package that we must ask to user (developer).

In first version we'll use a xml file as data model source.

There are two sort of classes that we need:

* `Menu Loader`_: Class to load menu and inject it into *WebContext*.
* `Menu Model`_: Classes to represent menu structure and information.

Menu Loader
____________________________

For load this model in runtime we can use a class that extend WebApplicationObjectSupport and annotated with '@Configurable' annotation.

You can see an example (but in old stile configuration form) in Structs-Menu library: http://struts-menu.sourceforge.net/xref/net/sf/navigator/menu/MenuLoader.html

Our add-on can't identify what is the class that loads menu so we also will create a annotation that mark this class. This annotation in first add-on release will not have associated *ITD*. In future this will create an *.aj* with base methods.



Our class will see like this::


	import org.org.springframework.beans.factory.annotation.Configurable;
	import org.springframework.stereotype.Component;
	import org.springframework.web.context.support.WebApplicationObjectSupport;
	import org.springframework.context.ApplicationContextException;
	import org.gvnix.web.menu.GvNIXMenuLoader

	@Component
	@Configurable
	@GvNIXMenuLoader
	public class MenuLoader extends WebApplicationObjectSupport {

		/** Configuration file for menus */
		public static final String MENU_CONFIG_FILE = "/WEB-INF/menu-config.xml";

		 protected void initApplicationContext() throws ApplicationContextException {
		 	....
		 	....
		 	Menu menu = loadMenu();
		 	getServletContext().setAttribute(MENU_KEY, menu);
		 	....
		 	....
		 }

		 protected Menu loadMenu(){
		 	....
		 }
 	}

This class can be modified in target project to provide an alternative method of menu data source by override ``loadMenu`` method.


Menu Model
____________________________

The other classes needed are Object representation of menu tree data model. These could be:

* `Menu Class`_: Root menu element.

* `MenuItem Class`_: Menu item. It can have a destination (target page) or not. It can have children or not.

This classes also need to be identified from add-on, so we'll create to annotations to mark these.

Menu Class
'''''''''''''''''''''''

This class contains a list of top level menu items. It Also has a name and optionally MenuItem path where add the roo menu operation creation requests (if it's empty this menus will be created into root).

This class will use annotation ``@GvNIXMenuModel``.

MenuItem Class
''''''''''''''''

This will have this properties:

* ``name`` (required): Item identification. This must be unique in the same menu tree level.

* ``rooId``: String for item Roo identification. Needed for mapping with Roo generated menus if it's not form Roo generated components this will not need this.

* ``label``: Text to use for item rendering.

* ``messageCode``: Message code for item rendering.

* ``hidden``: Don't show this element. We need it for Roo generated menus. In any time Roo can try to regenerate it because item controller has been changed. So is better hide items to prevent erroneous menu item regenerations.

* ``parent``: Parent MenuItem.

* ``destination``: Item's destination (String).

* ``roles``: Role list that can view this item and its children.

This class will use annotation ``@GvNIXMenuItemModel``.


ContextMenuStrategy
____________________________

This is the interface must be implemented by all class that provide an strategy to decide the items to show in a context menu. This classes must be register as Spring Bean (using annotations).

when you would to create a context menu you have to identify which strategy have to use it. The bean name is used to do it.

Standard installation will include two strategies. These are implemented with this classes:

* BaseURLContextMenuStrategy: Base class to use in a based on URL strategy.

* URLBrotherContextMenuStrategy: Strategy that returns all brothers and his children from menu item corresponding to the current page visualized (including itself).

* URLChildrenContextMenuStrategy: Strategy that returns all children from menu item corresponding to the current page visualized.


Installation
--------------

This must prepare project to use the menu. These are steps to do it:

* Create all classes of the `Menu data model`_ based on templates.
* Create ``gvnixmenu.tagx`` for render menu. This tag has the items iteration and context menu strategy query (if it's specified).
* Create ``gvnixitem.tagx`` for render menu. This tag has the items iteration. Add-on must checks if Spring Security is installed to decide what version of tag has to use: with or without security checks.
* Create configuration file ``/WEB-INF/menu-config.xml`` based on ``/WEB-INF/view/menu.jspx``.
* Replace ``/WEB-INF/view/menu.jspx`` with this add-on render page. This page will use the menu context attribute (injected by `Menu Loader`_) to paint menu elements.
* Activate the `Standard Roo actions compatibility`_.
* Activate `Project dependency checks`_

When setup process finish we must be able to run application with the new configuration.

Standard Roo actions compatibility
-----------------------------------------

For all new Roo Scaffold this add-on has to add menu items like original in original Roo menu, but this items will be create on path set in menu configuration.

To do that we will implement a new ``MenuOperations`` OSGi service.

This service has to be activate:

* After `Installation`_.

* After Roo Shell will start if `Menu Model`_ is in the project.

For make able identify which menu item is form a controller we can use ``id`` menu item property. If Roo requests to add a menu item it will be create on path defined on MenuItem configuration.


Project dependency checks
-------------------------------------

To prevent adding unnecessary dependencies, we need to monitor dependency add to know when Spring Security is installed. If it's installed add-on will use ``gvnixmenu.tagx`` version that performs security checks.

There is a problem about ``authorize`` with ``url`` parameter. In Spring Security 3.0.2 is disable scripting values for this parameter (This is `Spring security url jira ticket`_). This is changed since v 3.0.3 or 3.1.0. So we can need to update Spring Security dependency version.


Menu tree manage
---------------------

This add-on have to provide Roo shell commands to modify menu tree structure. This command have to modify configuration file (normally ``src/main/webapp/WEB-INF/gvnix-menu.xml``). The path to configuration file is set in `Menu Loader`_ ``MENU_CONFIG_FILE`` constant. If this value is ``null`` this option will not be available.

Additional features
---------------------

Features related here can be implemented in a second version of this add-on.

Automatic security manages
____________________________

In previous version we try to use the Spring Security *Controller* annotations to identify if user can use an item. Now we can use tag ``authorize`` with parameters ``url`` because the menu is drawing in a JSP page directly. This can't be applied to items without destination but we can use roles control. The ``url`` permission checks will be done after roles checks.

There is a problem about ``authorize`` with ``url`` parameter. In Spring Security 3.0.2 is disable scripting values for this parameter (This is `Spring security url jira ticket`_). This is changed since v 3.0.3 or 3.1.0. So we can need to update Spring Security dependency version.

This feature must be implemented in first add-on version.

The previous proposal was this::

	One of the most interesting feature could be automatically detection of *Controller* and *Controller Method* Spring Security configuration and configure all menu item relative to it. In this way we only have to set and manage this sort of configuration only in one place.



	This has to accomplice this requirements:

	* This must run without Spring Security: We can try to use ``classByName`` to check it statically, reference the classes with absolute path and mark Spring Security add-on dependency as compile scope.

	* This must use introspection to identify `@PreAuthorize`_ annotation expression. This use ``module`` menu item attribute to identify the controller. In this method we will have *controller* roo metadata identrifier. We need to transform it in a class name and get the controller class using ``classByName``.

	* The `@PreAuthorize`_ annotation could be placed in *Controller* class or in mapped url request method, so we have to checks first request method and if no expression is set check for class annotation.

	* Security annotation expression must be cached fist time we get it to reduce application runtime overhead.

	* This must use `Spring Expression`_ parser to evaluate if *in menu render time* every menu element is visible or not.

	* If menu item is not associated to a *controller* it must use *RolesPermissionsAdapter* *SM* behavior (check ``roles`` menu item attribute of the *httpRequest*).

Menu model from DB source
____________________________

With actual specification a project can modify the menu classes for load information from a DB. To do it developer must set `Menu Loader`_ ``MENU_CONFIG_FILE`` constant to ``null``. This disable all structure change commands because there is no way to access model data.

In future we can try to improve functionality to add support to change model directly in DB.

ITDs for menu classes
____________________________

Actual specification classes are generated completely in *.java* file. Would be good if annotations generated *.aj* with standards methods and properties of menu classes. If developer needs to make any changes in this classes (included make richer menu model) he will do it as it do in other roo artifacts (like entitites or controllers).

Conditional visualization based on Spring EL (expressions)
___________________________________________________________________

Another interesting feature could be add support to use Spring Expression Language for items conditional visualisation.


Roo Shell commands
====================

Command list to implement in this add-on:

``page setup``
--------------------------

This method install dependencies, creates configuration base, installs model and activate *Roo menu changes* monitoring.

This doesn't need any parameters.

To more information about it works see `Installation`_.

``page add``
----------------------------------

This method add new menu page. For application pages you can't create two pages to the same destination with the same parameters (parameters values are ignored).

Parameters:

* ``--parent`` (mandatory): Item parent's path. This must be like unix file system path. Root node is ``/``.

* ``--name`` (mandatory): Item's name.

* ``--label``: String for menu label.

* ``--messageCode``: Message code for menu label.

* ``--destination`` (optional): Item's destination.

* ``--roles`` (optional): String of *Role* list (comma separated) that can use it. If not set is available for every one. When `Automatic security manages`_ will be available this can be managed in *runtime*.

``page hide``
----------------------------------

This command hide a page.

Parameters:

* ``--page`` (mandatory): Item's Path. This must be like unix file system path. Root node is ``/``.


``page remove``
----------------------------------

This command remove a page. This only remove menu item no the destination jsp/controller/etc... .

This command will perform a `page hide`_ if item comes from Roo standart operation (like webscaffold or selenium).

If it has sub-items operation will be canceled. In this case you can use ``--force`` parameter to force operation.

Parameters:

* ``--page`` (mandatory): Item's Path. This must be like unix file system path. Root node is ``/``.

* ``--force`` (optional): Force to perform operation when a page has children.

``page move``
----------------------------------

This command move a page and its children to another tree node.

Parameters:

* ``--page`` (mandatory): Group's path. This must be like unix file system path. Root node is ``/``.

* ``--targetPath`` (optional): Parent item where to insert the item. The item will be add at last position. This must be like unix file system path. Root node is ``/``.

* ``--before`` (optional): Insert the page before this page. This must be like unix file system path. Root node is ``/``.

This command requires ones (and only one) of ``--targetPath`` or ``--before`` parameter.

``page update``
----------------------------------

Update an existing item values.

Parameters:

* ``--page`` (mandatory): Item's path. This must be like unix file system path. Root node is ``/``.

* ``--name`` (optional): Item's name.

* ``--label`` (optional): String for label.

* ``--messageCode`` (optional): Message code for label.

* ``--destination`` (optional): Item's destination.

* ``--roles`` (optional): String of *Role* list (comma separated) that can use it. If not set is available for every one. When `Automatic security manages`_ will be available this can be managed in *runtime*.

At least one of the optional parameters must be specified.


``page list``
--------------------------

List current menu tree structure with the *name* value. This is an example::

        /Main
        /Main/Authors
        /Main/New
        /Main/List
        /Books
        /Books/New
        /Books/List
        /Books/Book_a_book
        /About_us
        /About_us/Our_History
        /About_us/Contact

Parameters:

* ``--label`` (optional): Shows *label* page value.

* ``--messageCode`` (optional): Shows *messageCode* page value.

* ``--destination`` (optional): Shows *destination* page value.

* ``--roles`` (optional): Shows *roles* page value.

If we use all this parameters the output will show something like this::

        /Main                   {app.main}
        /Main/Authors 		    {app.authors}
        /Main/New               {app.new}           /author/?form   [USER_MANAGER,USER]
        /Main/List              {app.list}          /authors
        /Books                  {app.books}
        /Books/New              {app.new}           /book/?form     [USER_MANAGER,USER]
        /Books/List             {app.list}          /books
        /Books/Book_a_book 	    {app.bookabook}     /bookABook      [USER]
        /About_us               {app.about}
        /About_us/Our_History 	{app.history}       /history
        /About_us/Contact 	    {app.contact}       /contact

``page info``
---------------------------

Shows all information about a page. examples:

        /Main
          - Label: Main
          - Children:
            * Authors
            * Books
            * Book_a_book: /bookABook

        /Main/Book_a_book
          - Label: Main
          - Destination: /bookABook
          - roles: [USER]

Use cases
=============

Installation use case
---------------------

Developer wants to use new menu in his Roo application. This are the steeps to get it:

#. Install this add-on if it isn't already installed.

#. Execute command ``page setup``.

After that:

* Classes of `Menu model`_ will be created.
* Creates ``src/main/webapp/WEB-INF/tags/menu/gvnixmenu.tagx``.
* Configuration file ``src/main/webapp/WEB-INF/gvnix-menu.xml`` will be created with the same entries of ``src/main/webapp/WEB-INF/views/menu.jspx`` had.
* Replace ``src/main/webapp/WEB-INF/views/menu.jspx``.
* All Roo standard menu actions will change ``gvnix-menu.xml`` file.

List menu structure
--------------------

Developer wants show current menu structure:

#. Execute command ``menu list --messageCode --destination --roles``

In console appears::

/Main                    app.main
/Main/Authors            app.authors
/Main/Authors/New        app.new        /author/?form  USER_MANAGER,USER
/Main/Authors/List       app.list       /authors
/Main/Books              app.books
/Main/Books/New          app.new        /book/?form    USER_MANAGER,USER
/Main/Books/List         app.list       /books
/Main/Books/Book_a_book  app.bookabook  /bookABook     USER
/About_us                app.about
/About_us/Our_History    app.history    /history
/About_us/Contact        app.contact    /contact

Change a page item
--------------------

Developer wants to change the element ``Main`` to ``My_Main`` and its title to ``app.myMain``:

#. Execute command list to show menu path ``page list --messageCode``::

    /Main                    app.main
    /Main/Authors            app.authors
    /Main/Authors/New        app.new
    /Main/Authors/List       app.list
    /Main/Books              app.books
    /Main/Books/New          app.new
    /Main/Books/List         app.list
    /Main/Books/Book_a_book  app.bookabook
    /About_us                app.about
    /About_us/Our_History    app.history
    /About_us/Contact        app.contact


#. Execute command ``page update --page "/Main" --name My_Main --messageCode "app.myMain``

#. Execute command list to show result ``page list --title`` ::

    /My_Main                    app.myMain
    /My_Main/Authors            app.authors
    /My_Main/Authors/New        app.new
    /My_Main/Authors/List       app.list
    /My_Main/Books              app.books
    /My_Main/Books/New          app.new
    /My_Main/Books/List         app.list
    /My_Main/Books/Book_a_book  app.bookabook
    /About_us                   app.about
    /About_us/Our_History       app.history
    /About_us/Contact           app.contact


The add-on changed the values in the ``src/main/webapp/WEB-INF/gvnix-menu.xml``.


.. _Struct-menu: http://struts-menu.sourceforge.net/
.. _Struct-menu installation recipe: https://svn.disid.com/svn/gvcit/gvNIX/roo-struts-menu-integration.rst
.. _@PreAuthorize: http://static.springsource.org/spring-security/site/docs/3.0.x/reference/el-access.html#el-access-web
.. _PermissionAddapter: http://struts-menu.sourceforge.net/security.html
.. _Spring Expression: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/expressions.html
.. _Spring security url jira ticket: http://jira.springframework.org/browse/SEC-1456

