/*
 * gvNIX. Spring Roo based RAD tool for Conselleria d'Infraestructures
 * i Transport - Generalitat Valenciana
 * Copyright (C) 2010 CIT - Generalitat Valenciana
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package __TOP_LEVEL_PACKAGE__.web.menu;

import java.util.ArrayList;
import java.util.List;

import org.gvnix.web.menu.roo.addon.GvNIXMenuItemModel;
import org.springframework.roo.addon.javabean.RooJavaBean;
import org.w3c.dom.Element;

/**
 * Menu model item.
 *
 * This has all information about a menu's item.
 *
 * @author Jose Manuel Viv√≥ ( jmvivo at disid dot com ) at <a href="http://www.disid.com">DiSiD Technologies S.L.</a> made for <a href="http://www.cit.gva.es">Conselleria d'Infraestructures i Transport</a>
 *
 */
@RooJavaBean(settersByDefault = false)
@GvNIXMenuItemModel
public class MenuItem {

    private static final String DELIMITER = "/";

    private MenuItem parent;
    private String name;
    private String destination;
    private String rooId;
    private String label;
    private String messageCode;
    private String roles;
    private boolean hidden = false;
    private List<MenuItem> children = null;

    /**
     * Load Item values from XML Element. This doesn't load children nodes.
     *
     * @param parent
     * @param element
     */
    MenuItem(Element element) {
	this.name = element.getAttribute("name");
	this.rooId = element.getAttribute("rooId");
	this.label = element.getAttribute("label");
	this.messageCode = element.getAttribute("messageCode");
	this.destination = element.getAttribute("destination");
	this.roles = element.getAttribute("roles");
	if (element.hasAttribute("hidden")) {
	    this.hidden = Boolean.parseBoolean(element.getAttribute("hidden"));
	}
    }

    /**
     * Add a new child menu item.
     *
     * Child item parent is set to <code>this</code>.
     *
     * @param child
     */
    void addChild(MenuItem child) {
	if (children == null) {
	    children = new ArrayList<MenuItem>();
	}
	children.add(child);
	child.parent = this;
    }

    /**
     * Gets string path representation of the item.
     *
     * @return
     */
    public String getPath() {
	String parentPath = "";
	if (parent != null) {
	    parentPath = parent.getPath();
	}
	return parentPath + DELIMITER + name;
    }

    /**
     * Informs if this item has any children.
     *
     * @return
     */
    public boolean hasChildren() {
	return children != null && children.size() > 0;
    }

    @Override
    public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result
		+ ((destination == null) ? 0 : destination.hashCode());
	result = prime * result + (hidden ? 1231 : 1237);
	result = prime * result + ((name == null) ? 0 : name.hashCode());
	result = prime * result + ((parent == null) ? 0 : parent.hashCode());
	result = prime * result + ((roles == null) ? 0 : roles.hashCode());
	result = prime * result + ((rooId == null) ? 0 : rooId.hashCode());
	result = prime * result + ((label == null) ? 0 : label.hashCode());
	result = prime * result
		+ ((messageCode == null) ? 0 : messageCode.hashCode());
	return result;
    }

    @Override
    public boolean equals(Object obj) {
	if (this == obj)
	    return true;
	if (obj == null)
	    return false;
	if (getClass() != obj.getClass())
	    return false;
	MenuItem other = (MenuItem) obj;
	if (destination == null) {
	    if (other.destination != null)
		return false;
	} else if (!destination.equals(other.destination))
	    return false;
	if (hidden != other.hidden)
	    return false;
	if (name == null) {
	    if (other.name != null)
		return false;
	} else if (!name.equals(other.name))
	    return false;
	if (parent == null) {
	    if (other.parent != null)
		return false;
	} else if (!parent.equals(other.parent))
	    return false;
	if (roles == null) {
	    if (other.roles != null)
		return false;
	} else if (!roles.equals(other.roles))
	    return false;
	if (rooId == null) {
	    if (other.rooId != null)
		return false;
	} else if (!rooId.equals(other.rooId))
	    return false;
	if (label == null) {
	    if (other.label != null)
		return false;
	} else if (!label.equals(other.label))
	    return false;
	if (messageCode == null) {
	    if (other.messageCode != null)
		return false;
	} else if (!messageCode.equals(other.messageCode))
	    return false;
	return true;
    }

    @Override
    public String toString() {
	return "MenuItem [path=" + getPath() + ", detination=" + destination
		+ ", rooId=" + rooId + "]";
    }

}
