/*
 * gvNIX. Spring Roo based RAD tool for Conselleria d'Infraestructures
 * i Transport - Generalitat Valenciana
 * Copyright (C) 2010 CIT - Generalitat Valenciana
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package __TOP_LEVEL_PACKAGE__.web.menu;

import java.io.InputStream;
import java.util.Stack;

import javax.servlet.ServletContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.gvnix.web.menu.roo.addon.GvNIXMenuLoader;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.context.ApplicationContextException;
import org.springframework.stereotype.Component;
import org.springframework.util.Assert;
import org.springframework.web.context.support.WebApplicationObjectSupport;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Menu model loader and publisher.
 *
 * This class automatically is loaded by Spring ({@link Component} and
 * {@link Configurable}).
 *
 * In application initialization ({@link WebApplicationObjectSupport}) loads
 * menu model and load it in the application contexts.
 *
 * @author Jose Manuel Viv√≥ ( jmvivo at disid dot com ) at <a href="http://www.disid.com">DiSiD Technologies S.L.</a> made for <a href="http://www.cit.gva.es">Conselleria d'Infraestructures i Transport</a>
 *
 */
@Component
@Configurable
@GvNIXMenuLoader
public class MenuLoader extends WebApplicationObjectSupport {
    /** Configuration file for menus */
    public static final String MENU_CONFIG_FILE = "/WEB-INF/gvnix-menu.xml";

    public static final String MENU_SERVLET_CONTEXT_KEY = "gvnixMenu";

    public static final String MENU_MENU_ITEM_XML_ELEMENT_NAME = "menuItem";

    /**
     * Calls to {@link #loadMenu()} and set the menu to the
     * {@link ServletContext}.
     */
    protected void initApplicationContext() throws ApplicationContextException {
	Menu menu;
	try {
	    menu = loadMenu();
	} catch (Exception e) {
	    throw new ApplicationContextException(
		    "Error loading gvNIX web menu", e);
	}
	getServletContext().setAttribute(MENU_SERVLET_CONTEXT_KEY, menu);
    }

    /**
     * Loads menu model from XML file {@link #MENU_CONFIG_FILE}.
     *
     * This method loads menu using Stack based algorithm to better performance.
     *
     * Override this method to change menu's source. Remember to set to
     * <code>null</code> {@link #MENU_CONFIG_FILE}.
     *
     * @return
     * @throws Exception
     */
    protected Menu loadMenu() throws Exception {
	DocumentBuilder db = DocumentBuilderFactory.newInstance()
		.newDocumentBuilder();

	InputStream input = null;
	Document xml = null;

	input = getServletContext().getResourceAsStream(MENU_CONFIG_FILE);
	Assert.notNull(input, "gvNIX menu configuration not found '"
		+ MENU_CONFIG_FILE + "'");
	try {
	    xml = db.parse(input);
	} catch (Exception e) {
	    throw e;
	} finally {
	    try {
		input.close();
	    } catch (Exception e) {
	    }
	}

	Element root = xml.getDocumentElement();
	String menuName = root.getAttribute("name");

	Menu menu = new Menu(menuName);
	if (root.hasAttribute("rooMenuBasePath")) {
	    menu.setRooMenuBasePath(root.getAttribute("rooMenuBasePath"));
	}

	Stack<StackItem> stack = new Stack<StackItem>();

	// Push root
	stack.add(new StackItem(null, 0, root.getChildNodes()));
	StackItem current;
	Element currentElement;
	MenuItem menuItem;
	Node tmpNode;

	while (!stack.isEmpty()) {
	    // Pop element to evaluate
	    current = stack.pop();
	    for (int i = current.index; i < current.nodeList.getLength(); i++) {
		// Next Element and create MenuItem
		tmpNode = current.nodeList.item(i);
		if (tmpNode.getNodeType() != Node.ELEMENT_NODE
			|| !MENU_MENU_ITEM_XML_ELEMENT_NAME.equals(tmpNode
				.getNodeName())) {
		    continue;
		}

		currentElement = (Element) tmpNode;
		menuItem = new MenuItem(currentElement);

		if (current.parent == null) {
		    menu.addChild(menuItem);
		} else {
		    current.parent.addChild(menuItem);
		}

		// If element has children push current Stack Item
		// and push new Stack Item to add these children
		if (currentElement.hasChildNodes()) {
		    // Set index to next
		    current.index = i + 1;
		    // Push current
		    stack.push(current);
		    // Push new element
		    stack.push(new StackItem(menuItem, 0, currentElement
			    .getChildNodes()));
		    break;
		}
	    }
	}

	return menu;
    }

    /**
     * Stores state of menu children iteration of loadMenu's algorithm
     *
     * @author jmvivo
     *
     */
    private class StackItem {
	public MenuItem parent;
	public int index;
	public NodeList nodeList;

	public StackItem(MenuItem parent, int index, NodeList nodeList) {
	    super();
	    this.parent = parent;
	    this.index = index;
	    this.nodeList = nodeList;
	}

    }
}
