=========================================================
 gvNIX add-on for JPS 2.0 support in Roo Documentation
=========================================================

:Project:   gvNIX. Spring Roo based RAD tool
:Copyright: Conselleria d'Infraestructures i Transport - Generalitat Valenciana
:Author:    DiSiD Technologies, S.L.
:Revision:  $Rev: 3232 $
:Date:      $Date: 2010-04-21 15:25:41 +0200 (mi√© 21 de abr de 2010) $

This work is licensed under the Creative Commons Attribution-Share Alike 3.0    Unported License. To view a copy of this license, visit
http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to
Creative Commons, 171 Second Street, Suite 300, San Francisco, California,
94105, USA.

.. contents::
   :depth: 2
   :backlinks: none

.. |date| date::

Introduction
===============

This document contents relative to this add-on.

Requirements
=============

This add-on must provide a way to solve this requirements:

* This add-on must be implemented for Spring Roo 1.1.x versions.

* Roo generated applications must run in a Tomcat 5.5.

* This compatibility must be enabled after a Roo Shell command execution.

* After activation, this add-on must perform all changes in dependencies and pages to make the project compatible with JSP 2.0.

* This add-on must motoring changes of project dependencies to correct any changes that may broken JSP 2.0 compatibility.

* All tags and pages created or changes in application must be JPS 2.0 compatibility.


Analysis
=========

After this add-on is activated, it must control this aspects:

#. Project Dependencies: Libraries dependencies must be fixed and monitored.

#. Web scaffold: Existing pages/tags must be converted and new pages must be generated correctly.


Project Dependencies
-----------------------

In a normal Roo project generated by 1.1.x have dependencies incompatible with JSP 2.0:

* Serlet 2.5
* JSTL 1.2
* EL-API 1.2

We need to change this dependencies and assure that no body to make any modification that broke this modification.

To do that we could implement DependecyListener, FileListener or MetadaListener (ProjectMetadata) to monitor this changes.

First we try to do it with a DependencyListener but it miss any changes made out of framework. So now it uses a FileListener.

Web scaffold
--------------

Roo Web scaffold feature generates all pages and tag without warning of compatibility whit JPS 2.0. So, we need to regenerate all tags and pages existing in the project and intercept any creation or modification of this feature artifacts.

To do this, the best way could be prepare a web scaffold component substitute to assure the result pages are full compatible.

This makes that this add-on have to be depending of Roo Web Scaffold feature changes. Any change of this Roo feature must be adapted to our add-on to prevent losing Roo's enhancements.

How to know this add-on is active
-------------------------------------

First of all, this add-on is inactive by default in all Roo projects. So, How does it know it is active?. The first thing add-on's command must do is change project dependencies so this could be the mark to identify the activation status.

Roo Shell commands
====================

By now we only need a command:

* ``controller jsp2.0 support``: enables support to JSP 2.0 in current project.


Changes to perform by add-on
==============================

This section will describe the changes to perform by this add-on to assure the JPS 2.0 compatibility. Because this add-on is dependent of Roo Web Scaffold feature this section is classified by Roo versions.

1.1.0M1 rev 796
----------------

The changes have been identified in the proof https://svn.disid.com/svn/disid/proof/spring_roo/gvnix_tomcat5_test.

Using cargo maven plugin
___________________________________________

To run application with Tomcat 5.5 we need to install cargo maven plugin. We have to add this declaration in ``pom.xml`` file to enable it::

		      <plugin>
		        <groupId>org.codehaus.cargo</groupId>
		        <artifactId>cargo-maven2-plugin</artifactId>
		        <configuration>
		        	<container>
		        		<containerId>tomcat5x</containerId>
						<zipUrlInstaller>
							<url>http://apache.rediris.es/tomcat/tomcat-5/v5.5.28/bin/apache-tomcat-5.5.28.zip</url>
							<installDir>${user.home}/.m2/resources/tomcat5x</installDir>
						</zipUrlInstaller>
		        	</container>

					<configuration>
					<home>${project.build.directory}/cargo</home>
					<deployables>
						<deployable>
							<properties>
									<context>${project.name}</context>
								</properties>
							</deployable>
						</deployables>
					</configuration>
		        </configuration>
			</plugin>

Use this command to run application with cargo plug-in:

	mvn install cargo:start


.. Note::
	Include install goal every time you launch cargo. Cargo goals doesn't depend on install goal.


Servlet library
__________________

Into the ``pom.xml`` file we've found a dependency with Servlet Library version 2.5. This version uses JSP 2.1 so the first change to do is downgrade version dependency from 2.5 to 2.4. To do it replace this dependency definition::

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>


for this one::

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.4</version>
			<scope>provided</scope>
		</dependency>

**We use this dependency to identify if the add-on is active.**

JSTL Tags library
___________________

The version to use of this library is 1.1.1. So update this dependency::

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

with this one::

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.1.1</version>
		</dependency>

Now we need to add the dependency to this library implementation. So add this dependency::

		<dependency>
   			<groupId>taglibs</groupId>
   			<artifactId>standard</artifactId>
   			<version>1.1.1</version>
		</dependency>



EL API library
_________________

This library is provided by container and the required version is for JPS 2.1 version. We only need to remove this dependency::

		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>el-api</artifactId>
			<version>1.2</version>
			<scope>provided</scope>
		</dependency>


Since Roo 1.1.0-M1 rev 808 roo uses el-api version 1.0 (see http://jira.springframework.org/browse/ROO-763). This change has no effects to JSP 2.0 support (this is correct library version really). Anyway we continue make this check.

JPS 2.1 syntax/uses in pages/tags of Web Scaffold
__________________________________________________

In project generated with Roo trunk we haven't found any syntax or use features of JPS specification that doesn't work in version 2.0. So we don't need to do any change in jspx or tagx files.
