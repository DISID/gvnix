
===================================================
 gvNIX - Herramienta RAD para desarrolladores Java
===================================================

Bienvenid@ a gvNIX, una herramienta basada en Spring Roo para desarrollo rápido de aplicaciones Java.

Sobre este documento
=====================

Estas instrucciones muestran cómo empezar a trabajar con el código fuente de 
gvNIX. Notar que estas instrucciones son para desarrolladores que quieran 
participar en el desarrollo de gvNIX en sí mismo.

Si lo que quieres es probar una versión que ya ha sido empaquetada, probada y
distribuida por el equipo de desarrollo, te recomendamos que visites la 
página de descargas de gvNIX 
http://www.gvpontis.gva.es/proyectos-integra/proy-desarrollo y leas la 
*Documentación de referencia* incluida en la distribución.

Para la elaboración de este documento se ha utilizado reStructuredText y la codificación de caracteres UTF-8.

Copyright (C) 2010 Conselleria d'Infraestructures i Transport - Generalitat Valenciana

Esta obra está bajo la licencia `Reconocimiento-Compartir bajo la misma licencia 3.0 España <http://creativecommons.org/licenses/by-sa/3.0/es/>`_ 
de Creative Commons. La licencia completa se puede consultar en 
http://creativecommons.org/licenses/by-sa/3.0/es/

Requisitos
================

Para empezar con gvNIX necesitas:

* Una máquina *nix (usuarios de Windows deberían poder usar gvNIX creando sus propios scripts .bat)
* JDK 5.0 o superior ( http://java.sun.com/javase/downloads/index.jsp )
* Maven 2.0.9 o superior ( http://maven.apache.org/download.html )
* Acceso a Internet para que Maven pueda descargar las dependencias
* Cliente git, http://en.wikipedia.org/wiki/Git_%28software%29

Instrucciones de configuración
================================

Spring Roo 1.1.0.M1
-----------------------------

* Cambiar al directorio raíz de gvNIX

* Utiliza tu cliente Git para descargar los fuentes de Spring Roo desde
  ``git://git.springsource.org/roo/roo.git`` en el directorio raíz de gvNXI. 

  Si se accede a internet a través de un proxy se ha de habilitar en la configuración de `Git`_ (Anexo -> Configruación proxy -> Git).

  Ejemplo::

      bash:~/gvnix/trunk/code$ git clone git://git.springsource.org/roo/roo.git

* Cambia al directorio de Spring Roo y actualizar a la versión 1.1.0.M1 
  ``3a0b8a399aae14167139c185e4e31355e20d1f25``. Ejemplo::

    bash:~/gvnix/trunk/code$ cd roo
    bash:~/gvnix/trunk/code/roo$ git checkout 3a0b8a399aae14167139c185e4e31355e20d1f25

Maven
------------

* Configurar la variable de entorno MAVEN_OPTS::

    bash:~/gvnix/trunk/code$ export MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=512m"

  Si ya tienes configurada la variable MAVEN_OPTS, simplemente valida que 
  los tamaños de memoria son igual o superior a los indicados antes.

  En entornos *nix, aconsejamos añadir la configuración a tu ``.bashrc``::

   bash:~$ echo export MAVEN_OPTS=\"-Xmx1024m -XX:MaxPermSize=512m\" >> ~/.bashrc
   bash:~$ source ~/.bashrc

Arrancar gvNIX dev
====================

Si se accede a internet a través de un proxy se ha de habilitar en la configuración de `Maven`_ (Anexo -> Configruación proxy -> Maven).

#. Construir gvNIX::

    bash:~/gvnix/trunk/code$ mvn clean install

#. Empezando con gvNIX

   * Incluir el directorio ``bin`` de gvNIX en la variable de entorno PATH::

      bash:~/gvnix/trunk/code$ PATH=$PWD/bin:$PATH

   * Cambiar al directorio del proyecto Java::

      bash:~/gvnix/trunk/code$ cd ~/project-directory

   * Ejecutar el intérprete de comandos de gvNIX::

      bash:~/project-directory$ gvnix-dev

Escribir documentación
=======================

* Descargar e instalar el editor XML XMLmind Edición Personal ( http://www.xmlmind.com/xmleditor/download.shtml )
* Usa tu editor de DocBook (por ejemplo, XMLmind) para abrir 
``src/site/docbook/reference/index.xml`` y contribuir tu conocimiento.

Empaquetar gvNIX
=================

Para empaquetar una versión lista-para-instalar, utiliza el siguiente comando
desde el directorio raíz de gvNIX::

  bash:~/gvnix/trunk/code$ mvn clean install site assembly:assembly

Creará el archivo ZIP ``target/gvNIX-{version}.zip``. Para instalarlo lee 
la sección *Instalación de gvNIX* del documento 
*gvNIX - Documentación de referencia*.

¿Necesitas más información?
============================

Para más información crea y lee el documento *gvNIX - Documentación de referencia* (spanish).

# Ejecuta el siguiente comando desde el directorio raíz de gvNIX::

   bash:~/gvnix/trunk/code$ mvn site

# Creará la documentación en el directorio "target/site/reference" (en distintos formatos)::

    target
    `-- site
        `-- reference
            |-- html
            |   |-- index.html
            |   `-- ...
            |-- html-single
            |   `-- index.html
            `-- pdf
                `-- gvNIX-referencia.pdf

Esta guía de referencia te ayudará a empezar a trabajar. Algunas secciones
útiles son:

* Instalación de gvNIX
* Primeros pasos con gvNIX
* Desarrollo de aplicaciones con gvNIX

Anexo
======

Configruación proxy
---------------------

Git
~~~~

Configurar el acceso de Git a través de un proxy.

# Configurar el proxy http en el entorno de trabajo:

    bash:~$ export http_proxy=http://<username>:<password>@<proxy_ip>:<proxy_port>

# Configurar utilizando la herramienta de configuracion de Git:

    bash:~$ git config --global http.proxy proxy_addr:proxy_port

# La descarga de un proyecto cambia si se utiliza un proxy, el comando es el mismo pero el protocolo cambia.

    Checkout sin proxy::

        bash:~$ git clone git://github.com/doctrine/doctrine2.git doctrine

    Checkout *con proxy (se utiliza *http* en vez de git)::

        bash:~$ git clone http://github.com/doctrine/doctrine2.git doctrine

Maven
~~~~~~

Para configurar el acceso de Maven a través de un proxy hay que definir la configuración en el fichero $M2_HOME/config/settings.xml. Este es un ejemplo de este fichero con una configuración del proxy::

    <?xml version="1.0" encoding="UTF-8"?>
    <settings xmlns="http://maven.apache.org/POM/4.0.0" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                            http://maven.apache.org/xsd/settings-1.0.0.xsd">

        ...

        <proxies>
            <proxy>
                <id>optional</id>
                <active>true</active>
                <protocol>http</protocol>
                <host>proxy.somewhere.com</host>
                <port>8080</port>
                <username>proxyuser</username>
                <password>somepassword</password>
                <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
            </proxy>
        </proxies>
    </settings>

