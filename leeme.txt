
===================================================
 gvNIX - Herramienta RAD para desarrolladores Java
===================================================

Bienvenid@ a gvNIX, una herramienta basada en Spring Roo para desarrollo rápido de aplicaciones Java.

Sobre este documento
=====================

Estas instrucciones muestran cómo empezar a trabajar con el código fuente de 
gvNIX. Notar que estas instrucciones son para desarrolladores que quieran 
participar en el desarrollo de gvNIX en sí mismo.

Si lo que quieres es probar una versión que ya ha sido empaquetada, probada y
distribuida por el equipo de desarrollo, te recomendamos que visites la 
página de descargas de gvNIX 
http://www.gvpontis.gva.es/proyectos-integra/proy-desarrollo/gvnix/gvnix-documentacion/
y leas la documentación *Guía de referencia*.

Para la elaboración de este documento se ha utilizado reStructuredText y la codificación de caracteres UTF-8.

Copyright (C) 2010 Conselleria d'Infraestructures i Transport - Generalitat Valenciana

Esta obra está bajo la licencia `Reconocimiento-Compartir bajo la misma licencia 3.0 España <http://creativecommons.org/licenses/by-sa/3.0/es/>`_ 
de Creative Commons. La licencia completa se puede consultar en 
http://creativecommons.org/licenses/by-sa/3.0/es/

Requisitos
==========

Para empezar con gvNIX necesitas:

* Una máquina Unix (usuarios de Windows deberían poder usar gvNIX creando sus propios scripts .bat)
* JDK 5.0 o superior ( http://java.sun.com/javase/downloads/index.jsp )
* Maven 2.0.9 o superior [pero sólo las versiones 2.0.x, no las 2.2.x] ( http://maven.apache.org/download.html )
* Cliente git, http://en.wikipedia.org/wiki/Git_%28software%29
* Subversion
* Acceso a Internet

A continuación, se detalla el proceso de instalación y configuración de cada uno de estos requisitos.

Instalación y configuración
==============================

Configuración del entorno Unix
-------------------------------

.. admonition:: Directorio de trabajo

  Nos referiremos a $HOME como nuestro directorio de trabajo. En nuestro ejemplo, se corresponde con el directorio /home/user en donde user es el nombre de nuestro usuario en el sistema.

Es de gran utilidad que en nuestro entorno estén definidas una serie de variables que nos ayuden en nuestro trabajo diario. Para ello, prepararemos un script donde iremos añadiendo lo que necesitemos. Para la preparación de nuestro script realizaremos la siguiente configuración previa:

#. Crear en nuestro directorio de trabajo *$HOME* el fichero *.bash_devel*::

    Intérprete de comandos bash:

         touch $HOME/.bash_devel

#. Modificar en nuestro directorio de trabajo *$HOME* el fichero *.bashrc* para que ejecute el fichero *.bash_devel* añadiendo al final las siguientes líneas::

	# Development settings
	if [ -f ~/.bash_devel ]; then
	    . ~/.bash_devel
	fi

El fichero *.bashrc* se ejecuta siempre que se ejecuta el programa *bash*, por ejemplo cuando abrimos una consola nueva, por lo que siempre tendremos disponibles nuestras variables.

Si hemos modificado el fichero *.bash_devel* y ya teníamos la consola abierta los cambios no serán aplicados en esta sesión, pero podemos volver a ejecutar dicho fichero con el comando::

    Intérprete de comandos bash:

         source .bash_devel

A partir de ahora, cuando abramos una consola de comandos se ejecutará el contenido del fichero *.bash_devel*.

.. admonition:: Importante

  Cualquier referencia futura que hagamos a establecer una variable de entorno (``export``) deberá añadirse al *.bash_devel*.

JDK
--------

Por defecto, el equipo de desarrollo de gvNIX utiliza la versión 1.5.0_7 del JDK, pero puede utilizarse cualquier versión JDK 5.0 o superior.
Se recomienda realizar siempre la instalación siguiendo estos pasos:

#. Descargar el JDK 1.5.0_7 de http://java.sun.com/products/archive/

#. En el apartado Java Platform Standard Edition (Java SE)

#. Sub-apartado JDK/JRE - 5.0

#. Seleccionar 5.0 Update 7 y pulsar en "Go"

#. Pulsar en la descarga de JDK 5.0 Update 7: "Donwload JDK".

#. Seleccionar la plataforma Linux y el lenguage multidioma.

#. Se puede descargar en formato .bin.

#. Añadirle permiso de ejecución y ejecutarlo para que se descomprima::

    Intérprete de comandos bash:

         chmod 744 jdk-1_5_0_07-linux-i586.bin
         ./jdk-1_5_0_07-linux-i586.bin

#. Nos mostrará las condiciones de uso en texto y deberemos bajar hasta el final y aceptarlas.

#. Se habrá descomprimido en un nuevo directorio dentro de *tmp_jdk*. Este nuevo directorio debemos moverlo a */usr/lib/jvm/*::

    Intérprete de comandos bash:

         sudo mkdir -p /usr/lib/jvm
         sudo mv jdk1.5.0.0_07 /usr/lib/jvm

#. Establecer las siguientes variables de entorno añadiendo las siguientes líneas en el fichero $HOME/.bash_devel::

        export JAVA_HOME=/usr/lib/jvm/jdk1.5.0_07
        export JRE_HOME=$JAVA_HOME/jre
        export PATH=$JAVA_HOME/bin:$PATH

Podemos comprobar que todo ha ido correctamente ejecutando en nuestra consola ya abierta::

    Intérprete de comandos bash:

         cd $HOME
         source .bash_devel
         java -version

Y debemos ver un resultado parecido a este este::

        java version "1.5.0_07"
        Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_07-XXX)
        Java HotSpot(TM) XXX Server VM (build 1.5.0_07-XX, mixed mode)

Se pueden investigar las carpetas contenidas dentro del jdk, siendo las más importantes la carpeta 'bin' que contiene los ficheros ejecutables para compilar o lanzar aplicaciones java y la carpeta 'jre' que contiene la máquina virtual de java.

.. admonition:: Nota

  Si aún estás identificado como usuario root salir a usuario normal.

Apache Maven 2
-----------------

#. Descargarlo con la última actualización 2.0.X (en el momento de elaboración de este documento, la 2.0.11):

        http://maven.apache.org/download.html

   Puede descargarse la versión comprimida en formato bz2 que será la que menos espacio ocupe.

#. Descomprimirlo en el directorio deseado, en nuestro ejemplo lo haremos en $HOME/software/java

#. Establecer las siguientes variables de entorno añadiendo las siguientes líneas en el fichero $HOME/.bash_devel::

        export M2_HOME=$HOME/software/java/apache-maven-2.0.X
        export M2=$M2_HOME/bin
        export MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=512m"
        export PATH=$M2:$PATH

Podemos comprobar que todo ha ido correctamente ejecutando en nuestra consola ya abierta::

    Intérprete de comandos bash:

         cd $HOME
         source .bash_devel
         mvn -version

.. admonition:: Nota

        Reemplazar 2.0.X por el número de versión descargada.

Cliente Git
--------------

Para instalarlo puedes usar *aptitude* or *apt*.

* Aptitude

  Bash shell::

    sudo aptitude install git-core

* Apt-get

  Bash shell::

    sudo apt-get install git-core 

Subversion
-------------

Esta herramienta es muy recomendable que sea instalada desde las utilidades del sistema operativo.

Como ejemplo, para una distribución basada en *Debian* usaríamos el comando::

    Intérprete de comandos bash:

         sudo apt-get install subversion

Podemos encontrar los paquetes binarios e instrucciones en la página http://subversion.tigris.org/getting.html#binary-packages

Spring Roo
----------

gvNIX está basado en Spring Roo, por este motivo es necesario disponer del código fuente de Roo para compilar gvNIX.

* Cambiar al directorio raíz de gvNIX

  Ejemplo::

      bash:/$ cd ~/gvnix/trunk/code

* Utiliza tu cliente Git para descargar los fuentes de Spring Roo desde
  su repositorio en el directorio raíz de gvNIX. 

  Si se accede a internet a través de un proxy se ha de habilitar en la configuración de `Git`_ (Anexo -> Configruación proxy -> Git).

  Ejemplo::

      bash:~/gvnix/trunk/code$ git clone git://git.springsource.org/roo/roo.git
  
  Esto habrá descargado la rama raiz de desarrollo, es decir, el código fuente más actual del proyecto Roo.
  En general, durante el desarrollo, trabajaremos con este código fuente más actual de Roo a no ser que se indique lo contrario.
  
  En algunos casos, podemos requerir una versión de Roo menos actual, por ejemplo, una versión de Roo anterior por requerimiento de gvNIX.
  Para ello, necesitamos cambiar al directorio de Spring Roo y actualizar a la versión deseada.
  Por ejemplo a la versión 1.1.0.M1 mediante el código ``3a0b8a399aae14167139c185e4e31355e20d1f25``::

      bash:~/gvnix/trunk/code$ cd roo
      bash:~/gvnix/trunk/code/roo$ git checkout 3a0b8a399aae14167139c185e4e31355e20d1f25

Construir el proyecto
=======================

#. Aplicar el parche issue_3879.patch dentro del directorio de ROO::

    bash:~/gvnix/trunk/code$ cd roo
    bash:~/gvnix/trunk/code/roo$ git apply ../issue_3879.patch

#. Muestra los siguientes mensajes de error aunque si que se aplica correctamente::

    ~/projects/svn/gvnix/trunk/code/issue_3879.patch:44: space before tab in indent.
              JavaParserConstructorMetadata.addConstructor(compilationUnitServices, typeDeclaration.getMembers(), candidate, false, new HashSet<JavaSymbolName>());
    ~/projects/svn/gvnix/trunk/code/issue_3879.patch:50: space before tab in indent.
              JavaParserMethodMetadata.addMethod(compilationUnitServices, typeDeclaration.getMembers(), candidate, false, new HashSet<JavaSymbolName>());
    ~/projects/svn/gvnix/trunk/code/issue_3879.patch:157: trailing whitespace.   
    error: patch failed: addon-test/src/main/java/org/springframework/roo/addon/test/IntegrationTestMetadata.java:287
    error: addon-test/src/main/java/org/springframework/roo/addon/test/IntegrationTestMetadata.java: patch does not apply
    error: patch failed: classpath-javaparser/src/main/java/org/springframework/roo/classpath/javaparser/JavaParserMutableClassOrInterfaceTypeDetails.java:513
    error: classpath-javaparser/src/main/java/org/springframework/roo/classpath/javaparser/JavaParserMutableClassOrInterfaceTypeDetails.java: patch does not apply
    error: patch failed: classpath-javaparser/src/main/java/org/springframework/roo/classpath/javaparser/details/JavaParserConstructorMetadata.java:248
    error: classpath-javaparser/src/main/java/org/springframework/roo/classpath/javaparser/details/JavaParserConstructorMetadata.java: patch does not apply
    error: patch failed: classpath-javaparser/src/main/java/org/springframework/roo/classpath/javaparser/details/JavaParserMethodMetadata.java:33
    error: classpath-javaparser/src/main/java/org/springframework/roo/classpath/javaparser/details/JavaParserMethodMetadata.java: patch does not apply
    error: patch failed: classpath/src/main/java/org/springframework/roo/classpath/details/AnnotationMetadataUtils.java:10
    error: classpath/src/main/java/org/springframework/roo/classpath/details/AnnotationMetadataUtils.java: patch does not apply
    error: patch failed: classpath/src/main/java/org/springframework/roo/classpath/itd/AbstractItdMetadataProvider.java:245
    error: classpath/src/main/java/org/springframework/roo/classpath/itd/AbstractItdMetadataProvider.java: patch does not apply
    error: patch failed: model/src/main/java/org/springframework/roo/model/JavaType.java:114
    error: model/src/main/java/org/springframework/roo/model/JavaType.java: patch does not apply
    error: patch failed: pom.xml:213
    error: pom.xml: patch does not apply

#. Dado que gvNIX está basado en Roo, el primer paso es compilar y construir Roo::

    bash:~/gvnix/trunk/code/roo$ mvn clean install
   
   Cada vez que actualizes el código fuente del proyecto Roo con el comando ``git pull`` necesitarás volver a construirlo.

   .. admonition::Error al instalar

     El plugin de Maven *exec-maven-plugin* en su versión 1.2 puede dar problemas al instalar el proyecto, es necesario utilizar la versión 1.1.1

     En estos casos actualizar el pom.xml como sigue::

        ...
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.1.1</version>  <!-- Añadir esta línea -->
                <executions>
        ...

#. Construir gvNIX::

    bash:~/gvnix/trunk/code$ mvn clean install
    
   Cada vez que modifiques el proyecto gvNIX o hayas reconstruido el proyecto Roo, necesitarás volver a construir el gvNIX si quieres disponer de dichas modificaciones.

Arrancar la versión gvNIX de desarrollo
=======================================

Si se accede a internet a través de un proxy se ha de habilitar en la configuración de `Maven`_ (Anexo -> Configruación proxy -> Maven).

#. Empezando con gvNIX

   * Incluir el directorio ``bin`` de gvNIX en la variable de entorno PATH::

      bash:~/gvnix/trunk/code$ export PATH=~/gvnix/trunk/code/bin:$PATH

     A continuación, escribir el comando anterior en el fichero $HOME/.bash_devel para que
     esté disponible en el futuro en todas las nuevas consolas que abras.

   * Cambiar al directorio existente o nuevo del proyecto Java que quieras desarrollar con gvNIX::

      bash:~/gvnix/trunk/code$ cd ~/project-directory

   * Ejecutar el intérprete de comandos de gvNIX::

      bash:~/project-directory$ gvnix-dev

Empaquetar gvNIX
================

Para empaquetar una versión lista-para-instalar:

* Utiliza el siguiente comando desde el directorio roo de gvNIX::

   bash:~/gvnix/trunk/code/roo$ mvn clean install assembly:assembly

* Utiliza el siguiente comando desde el directorio raíz de gvNIX::

   bash:~/gvnix/trunk/code$ mvn clean install site assembly:assembly

Creará el archivo ZIP ``target/gvNIX-{version}.zip``. Para instalarlo lee 
la sección *Instalación de gvNIX* de la documentación a la que podrás acceder
tal como se indica en la siguiente sección.

Si lo que deseas es empaquetar una versión definitiva de gvNIX para ser distribuida al exterior,
lee el documento emplazado en ``doc/general/empaquetado-relesease-gvnix.rst``.

¿Necesitas más información?
===========================

Para más información crea y lee la documentación del proyecto.

#. Si has ejecutado los comandos de la sección anterior, ya dispondrás de dicha documentación generada.
   Sino, ejecuta el siguiente comando desde el directorio raíz de gvNIX::

    bash:~/gvnix/trunk/code$ mvn site

#. Tendrás la documentación en el directorio "target/site/reference" (en distintos formatos)::

    target
    `-- site
        `-- reference
            |-- html
            |   |-- index.html
            |   `-- ...
            |-- html-single
            |   `-- index.html
            `-- pdf
                `-- gvNIX-referencia.pdf
        `-- developer
            |-- html
            |   |-- index.html
            |   `-- ...
            |-- html-single
            |   `-- index.html
            `-- pdf
                `-- gvNIX-desarrollo.pdf

La documentación emplazada en ``reference`` te ayudará a empezar a desarrollar proyectos con gvNIX.
Algunas secciones útiles son:

* Instalación de gvNIX
* Primeros pasos con gvNIX
* Desarrollo de aplicaciones con gvNIX

La documentación emplazada en ``developer`` te ayudará a desarrollar el propio código de gvNIX.

Escribir documentación
======================

* Descargar e instalar el editor XML XMLmind Edición Personal ( http://www.xmlmind.com/xmleditor/download.shtml )
* Usa ese editor para abrir ``src/site/docbook/reference/index.xml`` y contribuir con tu conocimiento.

Anexo
=====

Configuración proxy
-------------------

Git
```

Configurar el acceso de Git a través de un proxy http.

# Configurar el proxy http en el entorno de trabajo:

    bash:~$ export http_proxy=http://<username>:<password>@<proxy_ip>:<proxy_port>

# Configurar utilizando la herramienta de configuracion de Git:

    bash:~$ git config --global http.proxy proxy_addr:proxy_port

# La descarga de un proyecto cambia si se utiliza un proxy, el comando es el mismo pero el protocolo cambia.

    Checkout sin proxy::

        bash:~$ git clone git://github.com/doctrine/doctrine2.git doctrine

    Checkout *con proxy (se utiliza *http* en vez de git)::

        bash:~$ git clone http://github.com/doctrine/doctrine2.git doctrine

Maven
`````

Para configurar el acceso de Maven a través de un proxy http hay que definir la configuración en el fichero $M2_HOME/config/settings.xml. Este es un ejemplo de este fichero con una configuración del proxy::

    <?xml version="1.0" encoding="UTF-8"?>
    <settings xmlns="http://maven.apache.org/POM/4.0.0" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                            http://maven.apache.org/xsd/settings-1.0.0.xsd">

        ...

        <proxies>
            <proxy>
                <id>optional</id>
                <active>true</active>
                <protocol>http</protocol>
                <host>proxy.somewhere.com</host>
                <port>8080</port>
                <username>proxyuser</username>
                <password>somepassword</password>
                <nonProxyHosts>www.google.com|*.somewhere.com</nonProxyHosts>
            </proxy>
        </proxies>
    </settings>

SVN
```

Para configurar el acceso de SVN a través de un proxy http hay que definir la configuración en el fichero '~/.subversion/servers'::

   [groups]
   mosuma=svn.mosuma.com
   [mosuma]
   http-proxy-host=proxy.ntu.edu.sg
   http-proxy-port=8080

Groups define una dirección a la que acceder mediante svn y los valores para este grupo.

Variables::

  * [groups] Dentro del grupo ``groups`` definir la dirección del repositorio donde accede. Nombre del grupo y dirección.
  * [Nombre del grupo] Definir las propiedades del proxy asociado al grupo (http-proxy-host y http-proxy-port).

