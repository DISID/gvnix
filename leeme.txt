
Instalación y configuración
==============================

Configuración del entorno Unix
-------------------------------

.. admonition:: Variables de entorno

  En el documento se hace referencia a los directorios $HOME y $GVNIX_HOME, donde:

  * $HOME es nuestro directorio de usuario.
  * $GVNIX_HOME es el directorio que contiene el directorio del código fuente del proyecto gvNIX.

Es de gran utilidad que en nuestro entorno estén definidas una serie de variables que nos ayuden en nuestro trabajo diario, por ejemplo *GVNIX_HOME*, *JAVA_HOME*, etc. 

En entornos Linux, se puede utilizar *$HOME/.bashrc* para definir esas variables y automáticamente se cargarán al abrir una nueva consola. Es una buena práctica definirlas en nuestro propio archivo y cargarlo desde el *.bashrc*, en nuestro caso este archivo lo llamaremos *.bash_devel*:

#. Crear en *$HOME* el fichero *.bash_devel*::

    Intérprete de comandos bash:

         touch $HOME/.bash_devel

#. Modificar el fichero *$HOME/.bashrc* para que cargue el fichero *.bash_devel*, añadiendo al final las siguientes líneas::

	# Development settings
	if [ -f ~/.bash_devel ]; then
	    . ~/.bash_devel
	fi

Si hemos modificado el fichero *.bash_devel* y ya teníamos la consola abierta los cambios no serán aplicados en esta sesión, pero podemos volver a ejecutar dicho fichero con el comando::

    Intérprete de comandos bash:

         source .bash_devel

A partir de ahora, cuando abramos una consola de comandos se ejecutará el contenido del fichero *.bash_devel*.

.. admonition:: Importante

  Cualquier referencia futura que hagamos a establecer una variable de entorno (``export``) deberá añadirse al *.bash_devel*.

Definir la variable de entorno GVNIX_HOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Definir la variable de entorno GVNIX_HOME con la ruta al directorio del código fuente (directorio *code*) del proyecto gvNIX.

Ejemplos:

* Si se ha descargado gvNIX de SVN con el comando ``svn co http://webdav.cop.gva.es/svn/gvnix`` en *$HOME/proyectos* definir la variable con::

    export GVNIX_HOME=$HOME/proyectos/gvnix/trunk/code

* Si hemos descargado gvNIX de SVN con el comando ``svn co http://webdav.cop.gva.es/svn/gvnix/trunk/code`` en *$HOME/proyecto-gvnix* definir la variable con::

    export GVNIX_HOME=$HOME/proyecto-gvnix/code

*Recordar añadir GVNIX_HOME al archivo $HOME/.bash_devel*.

JDK
--------

Por defecto, el equipo de desarrollo de gvNIX utiliza la versión 1.5.0_7 del JDK, pero puede utilizarse cualquier versión JDK 5.0 o superior.
Se recomienda realizar siempre la instalación siguiendo estos pasos:

#. Descargar el JDK 1.5.0_7 de http://java.sun.com/products/archive/

#. En el apartado Java Platform Standard Edition (Java SE)

#. Sub-apartado JDK/JRE - 5.0

#. Seleccionar 5.0 Update 7 y pulsar en "Go"

#. Pulsar en la descarga de JDK 5.0 Update 7: "Donwload JDK".

#. Seleccionar la plataforma Linux y el lenguage multidioma.

#. Se puede descargar en formato .bin.

#. Añadirle permiso de ejecución y ejecutarlo para que se descomprima::

    Intérprete de comandos bash:

         chmod 744 jdk-1_5_0_07-linux-i586.bin
         ./jdk-1_5_0_07-linux-i586.bin

#. Nos mostrará las condiciones de uso en texto y deberemos bajar hasta el final y aceptarlas.

#. Se habrá descomprimido en un nuevo directorio dentro de *tmp_jdk*. Este nuevo directorio debemos moverlo a */usr/lib/jvm/*::

    Intérprete de comandos bash:

         sudo mkdir -p /usr/lib/jvm
         sudo mv jdk1.5.0.0_07 /usr/lib/jvm

#. Establecer las siguientes variables de entorno añadiendo las siguientes líneas en el fichero $HOME/.bash_devel::

        export JAVA_HOME=/usr/lib/jvm/jdk1.5.0_07
        export JRE_HOME=$JAVA_HOME/jre
        export PATH=$JAVA_HOME/bin:$PATH

Podemos comprobar que todo ha ido correctamente ejecutando en nuestra consola ya abierta::

    Intérprete de comandos bash:

         cd $HOME
         source .bash_devel
         java -version

Y debemos ver un resultado parecido a este este::

        java version "1.5.0_07"
        Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_07-XXX)
        Java HotSpot(TM) XXX Server VM (build 1.5.0_07-XX, mixed mode)

Se pueden investigar las carpetas contenidas dentro del jdk, siendo las más importantes la carpeta 'bin' que contiene los ficheros ejecutables para compilar o lanzar aplicaciones java y la carpeta 'jre' que contiene la máquina virtual de java.

.. admonition:: Nota

  Si aún estás identificado como usuario root salir a usuario normal.

Apache Maven 2
-----------------

#. Descargarlo con la última actualización 2.0.X (en el momento de elaboración de este documento, la 2.0.11):

        http://maven.apache.org/download.html

   Puede descargarse la versión comprimida en formato bz2 que será la que menos espacio ocupe.

#. Descomprimirlo en el directorio deseado, en nuestro ejemplo lo haremos en $HOME/software/java

#. Establecer las siguientes variables de entorno añadiendo las siguientes líneas en el fichero $HOME/.bash_devel::

        export M2_HOME=$HOME/software/java/apache-maven-2.0.X
        export M2=$M2_HOME/bin
        export MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=512m"
        export PATH=$M2:$PATH

Podemos comprobar que todo ha ido correctamente ejecutando en nuestra consola ya abierta::

    Intérprete de comandos bash:

         cd $HOME
         source .bash_devel
         mvn -version

.. admonition:: Nota

        Reemplazar 2.0.X por el número de versión descargada.

Cliente Git
--------------

Para instalarlo puedes usar *aptitude* or *apt*.

* Aptitude

  Bash shell::

    sudo aptitude install git-core

* Apt-get

  Bash shell::

    sudo apt-get install git-core 

Subversion
-------------

Esta herramienta es muy recomendable que sea instalada desde las utilidades del sistema operativo.

Como ejemplo, para una distribución basada en *Debian* usaríamos el comando::

    Intérprete de comandos bash:

         sudo apt-get install subversion

Podemos encontrar los paquetes binarios e instrucciones en la página http://subversion.tigris.org/getting.html#binary-packages

Construir el proyecto
=======================

#. Compilar y construir Roo

   #. Compilar e instalar el directorio *wrapping*::

        Intérprete de comandos:

         cd $GVNIX_HOME/roo/wrapping
         mvn clean install

   #. Compilar e instalar Roo::

        Intérprete de comandos:

         cd $GVNIX_HOME/roo
         mvn clean install

   Cada vez que actualizes el código fuente del proyecto Roo necesitarás volver a construir Roo y gvNIX.

#. Compilar y construir gvNIX::

    Intérprete de comandos:

     cd $GVNIX_HOME
     mvn clean install
    
   Cada vez que modifiques el proyecto gvNIX o hayas reconstruido el proyecto Roo, necesitarás volver a construir el gvNIX si quieres disponer de dichas modificaciones.

Arrancar la versión gvNIX de desarrollo
=======================================

Si se accede a internet a través de un proxy se ha de habilitar en la configuración de `Maven`_ (Anexo -> Configruación proxy -> Maven).

#. Incluir el directorio ``bin`` del proyecto gvNIX en la variable de entorno PATH::

    Intérprete de comandos:

     # opcion 1
     cd $GVNIX_HOME
     export PATH=$PWD/bin:$PATH

     # opcion 2
     export PATH=$GVNIX_HOME/bin:$PATH

   En entornos Linux es útil añadir el comando anterior al *$HOME/.bashrc*, en nuestro caso añadirlo al fichero *$HOME/.bash_devel* para que esté disponible en el futuro en todas las nuevas consolas que abras.

#. Cambiar al directorio del proyecto y desarrolla con la versión de desarrollo::

    Intérprete de comandos:

      cd ~/project-directory
      gvnix-dev

.. admonition:: Importante

  Después de cada cambio y recompilar gvNIX se *DEBE* borrar el contenido de la *cache*, para ello borrar el contenedor OSGi ubicado en *$GVNIX_HOME/roo/bootstrap/target/osgi*. 

  Es necesario para que el contenedor OSGi cargue los nuevos bundles y no los bundles en cache.

  Al hacer las pruebas con *gvnix-dev* recomendable ejecutar el comando ``dev mode`.

Empaquetar gvNIX
================

Para empaquetar una versión lista-para-instalar:

* Utiliza el siguiente comando desde el directorio roo de gvNIX::

   bash:~/gvnix/trunk/code/roo$ mvn clean install assembly:assembly

* Utiliza el siguiente comando desde el directorio raíz de gvNIX::

   bash:~/gvnix/trunk/code$ mvn clean install site assembly:assembly

Creará el archivo ZIP ``target/gvNIX-{version}.zip``. Para instalarlo lee 
la sección *Instalación de gvNIX* de la documentación a la que podrás acceder
tal como se indica en la siguiente sección.

Si lo que deseas es empaquetar una versión definitiva de gvNIX para ser distribuida al exterior,
lee el documento emplazado en ``doc/general/empaquetado-relesease-gvnix.rst``.
