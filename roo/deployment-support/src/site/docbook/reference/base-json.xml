<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="base-json"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>JSON Add-On</title>

  <para><sidebar>
      <para>There are a number of ways to work with JSON document
      serialization and desrialization in Roo projects:</para>

      <para>Option 1: Built-in JSON handling managed in domain layer
      (discussed in this section)</para>

      <itemizedlist>
        <listitem>
          <para>This offers customizable <link
          xlink:href="http://flexjson.sourceforge.net/">FlexJson</link>
          integration</para>
        </listitem>
      </itemizedlist>

      <para>Option 2: Spring MVC detects the <link
      xlink:href="http://jackson.codehaus.org/">Jackson</link> library in the
      application classpath</para>

      <itemizedlist>
        <listitem>
          <para>simply use Spring's <link
          xlink:href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-requestbody">@RequestBody</link>
          and <link
          xlink:href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-responsebody">@ResponseBody</link>
          annotations in the controllers, or </para>
        </listitem>

        <listitem>
          <para>take advantage of Spring's <link
          xlink:href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-multiple-representations">ContentNegotiatingViewResolver</link></para>
        </listitem>
      </itemizedlist>
    </sidebar>The JSON add-on offers JSON support in the domain layer as well
  as the Spring MVC scaffolding. A number of methods are provided to
  facilitate serialization and deserialization of JSON documents into domain
  objects. The JSON add-on makes use of the <link
  xlink:href="http://flexjson.sourceforge.net/">Flexjson</link>
  library.</para>

  <section>
    <title>Adding Json Functionality to Domain Types</title>

    <para>The add-on offers an annotation as well as two commands which
    support the integration of JSON support into the projects domain
    layer:</para>

    <orderedlist>
      <listitem>
        <para>Annotating a target type with the default <emphasis
        role="bold">@RooJson</emphasis> annotation will prompt Roo to create
        an ITD with the following four methods:</para>

        <para><programlisting>public String toJson() {
   return new JSONSerializer().exclude("*.class").serialize(this);
}
</programlisting>This method returns a JSON representation of the current
        object.</para>

        <para><programlisting>public static Owner fromJsonToPet(String json) {
   return new JSONDeserializer&lt;Owner&gt;().use(null, Owner.class).deserialize(json);
}
</programlisting>This method has a String parameter representing the JSON
        document and returns a domain type instance if the document can be
        serialized by the underlying deserializer.</para>

        <para><programlisting>public static String toJsonArray(Collection&lt;Owner&gt; collection) {
   return new JSONSerializer().exclude("*.class").serialize(collection);
}
</programlisting>This method will convert a collection of the target type,
        provided as method parameter, into a valid JSON document containing an
        array.</para>

        <para><programlisting>public static Collection&lt;Owner&gt; fromJsonArrayToOwners(String json) {
   return new JSONDeserializer&lt;List&lt;Owner&gt;&gt;().use(null, 
                     ArrayList.class).use("values", Owner.class).deserialize(json);
}
</programlisting>This method will convert a JSON array document, passed in as
        a method parameter, into a collection of the target type.</para>

        <para>The @RooJson annotation can be used to customize the names of
        the methods being introduced to the target type. Furthermore, you can
        disable the creation of any of the above listed methods by providing
        an empty String argument for the unwanted method in the @RooJson
        annotation. Example:</para>

        <para><programlisting>@RooJson(toJsonMethod="", fromJsonMethod="myOwnMethodName")</programlisting></para>
      </listitem>

      <listitem>
        <para>The <link linkend="command-index-json-add">json add</link>
        command used from the Roo shell will introdroduce the @RooJson
        annotation into the specified target type.</para>
      </listitem>

      <listitem>
        <para>The <link linkend="command-index-json-all">json all</link>
        command will detect all domain entities in the project and annotate
        all of them with the @RooJson annotation.</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Json REST Interface in Spring MVC controllers</title>

    <para>Once your domain types are annotated with the @RooJson annotation
    and Spring MVC scaffolding is selected Roo will automatically create a
    RESTful interface in the scaffolded controllers for all backing types
    where JSON support is enabled. To disable this feature simply set the
    exposeJson attribute in the @RooWebScaffold annotation to false:</para>

    <para><programlisting>@RooWebSAcaffold(..., <emphasis role="bold">exposeJson=false</emphasis>)</programlisting>If
    Json scaffolding is enabled Roo will provide the following methods via its
    Spring MVC controllers:</para>

    <orderedlist>
      <listitem>
        <para><programlisting>@RequestMapping(headers = "Accept=application/json")
@ResponseBody
public String <emphasis role="bold">listJson</emphasis>() {
    return Owner.toJsonArray(Owner.findAllOwners());
}</programlisting>As you can see this method takes advantage of Springs
        request mappings and will respond to HTTP GET requests which contain a
        'Accept=application/json' header. The @ResponseBody annotation is used
        to serialize the JSON document.</para>

        <para>To test the functionality with curl you can try out the Roo pet
        clinic sample script (run roo&gt; script clinic.roo; then quit the Roo
        shell and start Tomcat 'mvn tomcat:run'):</para>

        <para><programlisting>curl -i -H "Accept: application/json" http://localhost:8080/petclinic/owners</programlisting></para>
      </listitem>

      <listitem>
        <para><programlisting>@RequestMapping(value="/{id}", method=RequestMethod.GET, headers="Accept=application/json")
@ResponseBody
public Object <emphasis role="bold">showJson</emphasis>(@PathVariable("id") Long id) {
    Owner owner = Owner.findOwner(id);
    if (owner == null) {
        return new ResponseEntity&lt;String&gt;(HttpStatus.NOT_FOUND);
    }
    return owner.toJson();
}</programlisting>This method accepts a HTTP GET request with a <link
        xlink:href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-ann-requestparam">@PathVariable</link>
        for the requested Owner ID. The owner is serialized and returned as
        JSON document if found, otherwise a HTTP 404 (NOT FOUND) status code
        is returned. The accompanying curl command is as follows:</para>

        <programlisting>curl -i -H "Accept: application/json" http://localhost:8080/petclinic/owners/1</programlisting>
      </listitem>

      <listitem>
        <para><programlisting>@RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
public ResponseEntity&lt;String&gt; <emphasis role="bold">createFromJson</emphasis>(@RequestBody String json) {
    Owner.fromJsonToOwner(json).persist();
    return new ResponseEntity&lt;String&gt;(HttpStatus.CREATED);
}</programlisting>This method accepts a JSON document sent via HTTP POST
        converts it into an Owner instance and persists that new instance
        before returning a HTTP 201 (CREATED) status code. The accompanying
        curl command is as follows:</para>
      </listitem>

      <listitem>
        <para><programlisting>@RequestMapping(value = "/jsonArray", method = RequestMethod.POST, 
                headers = "Accept=application/json")
public ResponseEntity&lt;String&gt; <emphasis role="bold">createFromJsonArray</emphasis>(@RequestBody String json) {
    for (Owner owner: Owner.fromJsonArrayToOwners(json)) {
        owner.persist();
    }
    return new ResponseEntity&lt;String&gt;(HttpStatus.CREATED);
}</programlisting>This method accepts a document containing a JSON array sent
        via HTTP POST and converts the array into Owner instances which are
        then persisted. The method returns a HTTP 201 (CREATED) status code.
        The accompanying curl command is as follows:</para>

        <programlisting>curl -i -X POST -H Accept:application/json -H Content-Type:application/json 
     -d '[{"address":"The Boulevard","birthDay":861372000000,"city":"Springfield",
           "email":"homer@simpsons.com","firstName":"Homer Jay",
           "homePage":"http://simpsons.com","lastName":"Simpson",
           "telephone":"123456789"},
          {"address":"The Boulevard","birthDay":904140000000,
           "city":"Springfield","email":"marge@simpsons.com",
           "firstName":"Marge","homePage":"http://simpsons.com",
           "lastName":"Simpson","telephone":"123456789",}]' 
     http://localhost:8080/petclinic/owners/jsonArray
</programlisting>
      </listitem>

      <listitem>
        <para><programlisting>@RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
public ResponseEntity&lt;String&gt; <emphasis role="bold">updateFromJson</emphasis>(@RequestBody String json) {
    if (Owner.fromJsonToOwner(json).merge() == null) {
        return new ResponseEntity&lt;String&gt;(HttpStatus.NOT_FOUND);
    }
    return new ResponseEntity&lt;String&gt;(HttpStatus.OK);
}</programlisting>This method accepts a JSON document sent via HTTP PUT and
        converts it into an Owner instance before attempting to merge it with
        an existing record. If the xisting record is not found a HTTP 404 (NOT
        FOUND) status code is sent to the client, otherwise a HTTP 200 (OK)
        status code is sent. The accompanying curl command is as
        follows:</para>

        <programlisting>curl -i -X PUT -H Accept:application/json -H Content-Type:application/json 
     -d '{"address":"The Boulevard","birthDay":904140000000,"city":"Springfield",
          "email":"maggie@simpsons.com","firstName":"Maggie",
          "homePage":"http://simpsons.com","id":1,"lastName":"Simpson",
          "telephone":"123456789","version"=0}' 
     http://localhost:8080/petclinic/owners
</programlisting>
      </listitem>

      <listitem>
        <para><programlisting>@RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, 
                headers = "Accept=application/json")
public ResponseEntity&lt;String&gt; <emphasis role="bold">updateFromJsonArray</emphasis>(@RequestBody String json) {
    for (Owner owner: Owner.fromJsonArrayToOwners(json)) {
        if (owner.merge() == null) {
            return new ResponseEntity&lt;String&gt;(HttpStatus.NOT_FOUND);
        }
    }
    return new ResponseEntity&lt;String&gt;(HttpStatus.OK);
}</programlisting>This method accepts a document containing a JSON array sent
        via HTTP PUT and converts the array into Owner instances which are
        then merged. The method returns a HTTP 201 (CREATED) status code. The
        accompanying curl command is as follows:</para>

        <programlisting>curl -i -X PUT -H Accept:application/json -H Content-Type:application/json 
     -d '[{"address":"The Boulevard","birthDay":904140000000,"city":"Springfield",
           "email":"lisa@simpsons.com","firstName":"Lisa","homePage":"http://simpsons.com",
           "id":2,"lastName":"Simpson","telephone":"123456789","version"=0},
          {"address":"The Boulevard","birthDay":904140000000,"city":"Springfield",
           "email":"abraham@simpsons.com","firstName":"Abraham","homePage":"http://simpsons.com",
           "id":3,"lastName":"Simpson","telephone":"123456789","version"=0}]' 
     http://localhost:8080/petclinic/owners/jsonArray</programlisting>
      </listitem>

      <listitem>
        <para><programlisting>@RequestMapping(value="/{id}", method=RequestMethod.DELETE, headers="Accept=application/json")
public ResponseEntity&lt;String&gt; <emphasis role="bold">deleteFromJson</emphasis>(@PathVariable("id") Long id) {
    Owner owner = Owner.findOwner(id);
    if (owner == null) {
        return new ResponseEntity&lt;String&gt;(HttpStatus.NOT_FOUND);
    }
    owner.remove();
    return new ResponseEntity&lt;String&gt;(HttpStatus.OK);
}</programlisting>This method accepts a HTTP DELETE request with a
        @PathVariable identifying the Owner record marked for deletion. HTTP
        status code 200 (OK) is returned if an Owner record with the given ID
        was found, otherwise HTTOP status code 404 (NOT FOUND) is returned.
        The accompanying curl command is as follows:</para>

        <programlisting>curl -i -H Accept:application/json -X DELETE http://localhost:8080/petclinic/owners/1</programlisting>
      </listitem>

      <listitem>
        <para>[Optional] Roo will also generate a method to retrieve a
        document containing a JSON array if the form backing object defines
        dynamic finders. Here is an example taken from VisitController in the
        pet clinic sample application:</para>

        <para><programlisting>@RequestMapping(params = "find=ByDescriptionAndVisitDate", method = RequestMethod.GET, 
                headers = "Accept=application/json")
public String <emphasis role="bold">jsonFindVisitsByDescriptionAndVisitDate</emphasis>(@RequestParam("description") String desc, 
        @RequestParam("visitDate") @DateTimeFormat(style = "M-") Date visitDate, Model model) {
    return Visit.toJsonArray(Visit.findVisitsByDescriptionAndVisitDate(desc, visitDate).getResultList());
}</programlisting>This method accepts a HTTP GET request with a number of
        request parameters which define the finder method as well as the
        finder method arguments. The accompanying curl command is as
        follows:</para>

        <programlisting>curl -i -H Accept:application/json 
     http://localhost:8080/petclinic/visits?find=ByDescriptionAndVisitDate%26description=test%26visitDate=12/1/10</programlisting>
      </listitem>
    </orderedlist>

    <para>If you need help configuring the serialization or deserialization
    process of JSON documents which is handled by the FlexJson library please
    refer to their <link
    xlink:href="http://flexjson.sourceforge.net/">reference
    documentation</link>.</para>
  </section>
</chapter>
