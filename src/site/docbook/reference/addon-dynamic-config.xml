<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="addon-dynamic_config"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Add-on Dynamic Configuration</title>

  <section>
    <title>Descripción</title>

    <para>El add-on pretende simplificar la gestión de distintos valores de
    configuración por entorno. Cuando usamos Maven como gestor del ciclo de
    desarrollo del proyecto nos encontramos con la posibilidad de usar <link
    xlink:href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html">perfiles</link>
    para definir los ditintos entornos de
    ejecución que tendrá la aplicación (desarrollo, pruebas, preproducción, producción, ...).</para>

    <programlisting>   &lt;profiles&gt;
     &lt;profile&gt;
       &lt;id&gt;environment-name&lt;/id&gt;
       &lt;properties&gt;
         &lt;property.name&gt;property-value&lt;/name&gt;
         ...
       &lt;/properties&gt;
     &lt;/profile&gt;
   &lt;/profiles&gt;</programlisting>

    <para>Esta funcionalidad nos permite configurar el comportamiento de la aplicación 
    de manera distinta según donde vaya a ser ejecutado. Por
    ejemplo, la conexión a la BBDD de la aplicación será a una URL distinta
    según estemos trabajando en desarrollo (en la máquina del programador) o
    si la aplicación va a ser desplegada en el entorno de producción. </para>

    <para>Para esto en la sección <emphasis>&lt;properties/&gt;</emphasis> de
    cada sección profile podemos declarar tantas propiedades como queramos de
    forma que al generar el paquete de distribución del proyecto, se
    reemplace el valor de estas propiedades en los ficheros adecuados. Esto
    implica que en distintos archivos de configuración, como puede ser
    <emphasis>database.properties</emphasis>, empiecen a aparecer definidas
    variables con el formato <emphasis>${nombre.propiedad}</emphasis>. Esta
    circunstancia, a la larga, puede complicar la comprensión de la
    configuración del proyecto o dificultar su gestión.</para>
  </section>

  <section>
    <title>Funcionalidad</title>

    <para>Vista la problemática descrita en el punto anterior, el add-on
    dynamic configuration simplifica esta gestión.
    Podemos modificar las configuraciones de manera más rápida que haciéndolo
    a mano y además es independiente del sistema de gestión del ciclo de vida
    del proyecto (actualmente las configuraciones se pueden exportar a perfiles
    Maven, pero el add-on podría exportar a otros formatos como los de Ant, etc.).</para>

    <para>A medida que vamos ejecutando comandos del add-on veremos que se
    crea/modifica el archivo
    <emphasis>src/main/resources/dynamic-configuration.xml</emphasis></para>

    <para>Podemos crear una nueva configuración con el comando <link
    linkend="apendice-comandos_addon-dynamic_config-config_save">configuration
    create</link> que tiene un parámetro obligatorio (<emphasis>name</emphasis>)
    que define el nombre que se le da a la nueva configuración.</para>

    <para>A partir de este momento podemos añadir nuevas propiedades para que estén
    disponibles para su gestión desde todas las configuraciones con <link
    linkend="apendice-comandos_addon-dynamic_config-config_prop_add">configuration
    property add</link>. Las propiedades inicialmente tomarán el valor que tuviesen
    definido en el proyecto y podremos modificar dichos valores con <link
    linkend="apendice-comandos_addon-dynamic_config-config_prop_update">configuration
    property value</link>. En algunos casos, por seguridad, se desea que el valor de
    una propiedad no esté almacenado en el proyecto, para ello puede utilizarse el
    comando <link linkend="apendice-comandos_addon-dynamic_config-config_prop_undefined">
    configuration property undefined</link> de forma que el valor se proporcionará desde
    la línea de comandos con <emphasis>-D nombre=valor</emphasis>.</para>
    
    <para>Si queremos ver las distintas configuraciones que hemos creado, sus
    propiedades y los valores definidos para cada una de ellas usaremos <link
    linkend="apendice-comandos_addon-dynamic_config-config_list">configuration
    list</link>.</para>

    <para>Para escribir las configuraciones actuales en el proyecto
    debemos utilizar el comando <link
    linkend="apendice-comandos_addon-dynamic_config-config_export">configuration
    export</link>.</para>
    
    <para>Una vez exportadas las configuraciones, pueden utilizarse desde maven
    con el modificador <emphasis>-P nombre</emphasis> siendo el nombre el valor
    definido para la configuración en el comando <link
    linkend="apendice-comandos_addon-dynamic_config-config_save">configuration
    create</link></para>

    <para>Veamoslo en funcionamiento:</para>

    <programlisting>roo&gt; <emphasis role="bold">script --file clinic.roo</emphasis>
...
roo&gt; <emphasis role="bold">configuration create --name dev</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Configuration created with currently available properties
First created configuration set as default
(use 'configuration property add' to make a property available for all configurations
roo&gt; <emphasis role="bold">configuration property add --name database.url</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)
roo&gt; <emphasis role="bold">configuration property add --name hibernate.hbm2ddl.auto</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)
roo&gt; <emphasis role="bold">configuration property add --name log4j.rootLogger</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)
roo&gt; <emphasis role="bold">configuration property add --name database.password</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property available for all configurations
(use 'configuration property value' to set property new values)
(use 'configuration property undefined' to set property with no values)
roo&gt; <emphasis role="bold">configuration property value --configuration dev --property database.url --value jdbc:hsqldb:mem:mydevdb</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)
roo&gt; <emphasis role="bold">configuration list</emphasis>
      (Active)      dev
----------------------------------------
 * Database Connection Properties
   - database.url = "jdbc:hsqldb:mem:mydevdb"
   - database.password = ""
 * Persistence Property Attributes XML
   - hibernate.hbm2ddl.auto = "create"
 * Logging Service Properties
   - log4j.rootLogger = "INFO, stdout"
(use 'configuration export' to write configurations into the project)
roo&gt; <emphasis role="bold">configuration export</emphasis>
Updated ROOT/pom.xml
Updated SRC_MAIN_RESOURCES/META-INF/spring/database.properties
Updated SRC_MAIN_RESOURCES/log4j.properties
Updated SRC_MAIN_RESOURCES/META-INF/persistence.xml
Configurations exported into project
(use '-P name' on maven commands to use a configuration)
(use 'configuration create' to define a new configuration)
roo&gt; <emphasis role="bold">configuration create --name pro</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Configuration created with currently available properties
 * Database Connection Properties
   - database.url = "jdbc:hsqldb:mem:petclinic"
   - database.password = ""
 * Persistence Property Attributes XML
   - hibernate.hbm2ddl.auto = "create"
 * Logging Service Properties
   - log4j.rootLogger = "INFO, stdout"
(use 'configuration property add' to make a property available for all configurations)
roo&gt; <emphasis role="bold">configuration property value --configuration pro --property database.url --value jdbc:hsqldb:file:myprodb</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)
roo&gt; <emphasis role="bold">configuration property value --configuration pro --property hibernate.hbm2ddl.auto --value update</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)
roo&gt; <emphasis role="bold">configuration property value --configuration pro --property log4j.rootLogger --value "ERROR, stdout"</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value seted
(use 'configuration list' to show configurations and their properties)
roo&gt; <emphasis role="bold">configuration property undefined --configuration pro --property database.password</emphasis>
Updated SRC_MAIN_RESOURCES/dynamic-configuration.xml
Property value undefined
(use '-D propname=propvalue' on maven commands to set the property value)
(use 'configuration list' to show configurations and their properties)
roo&gt; <emphasis role="bold">configuration list</emphasis>
      (Active)      dev
----------------------------------------
 * Database Connection Properties
   - database.url = "jdbc:hsqldb:mem:mydevdb"
   - database.password = ""
 * Persistence Property Attributes XML
   - hibernate.hbm2ddl.auto = "create"
 * Logging Service Properties
   - log4j.rootLogger = "INFO, stdout"
                    pro
----------------------------------------
 * Database Connection Properties
   - database.url = "jdbc:hsqldb:file:myprodb"
   - database.password = (UNDEFINED)
 * Persistence Property Attributes XML
   - hibernate.hbm2ddl.auto = "update"
 * Logging Service Properties
   - log4j.rootLogger = "ERROR, stdout"
(use 'configuration export' to write configurations into the project)
roo&gt; <emphasis role="bold">configuration export</emphasis>
Updated ROOT/pom.xml
Updated ROOT/pom.xml
Updated SRC_MAIN_RESOURCES/META-INF/spring/database.properties
Updated SRC_MAIN_RESOURCES/log4j.properties
Updated SRC_MAIN_RESOURCES/META-INF/persistence.xml
Updated SRC_MAIN_RESOURCES/META-INF/spring/database.properties
Updated SRC_MAIN_RESOURCES/log4j.properties
Updated SRC_MAIN_RESOURCES/META-INF/persistence.xml
Configurations exported into project
(use '-P name' on maven commands to use a configuration)
(use 'configuration create' to define a new configuration)
roo&gt; <emphasis role="bold">quit</emphasis>
Total execution time 1657 seconds
Roo exited with code 0
shell&gt; <emphasis role="bold">mvn clean tomcat:run -P dev</emphasis>
... (Ejecutando aplicación con la configuración llamada dev) ...
shell&gt; <emphasis role="bold">mvn clean tomcat:run -P pro -D database.password=</emphasis>
... (Ejecutando aplicación con la configuración llamada pro) ...
</programlisting>
  </section>
</chapter>
