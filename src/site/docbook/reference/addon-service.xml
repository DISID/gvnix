<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="addon-service" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Add-on Service</title>

  <para xml:lang="es">Add-on que permite generar servidores y clientes de
  servicios web (WS) de forma automática.</para>

  <section xml:id="addon-service_funcionality">
    <title>Funcionalidad del Add-on.</title>

    <para>Permite crear servicios web desde cero o importarlos basándose en
    archivos de descripción de servicios WSDL.</para>

    <section>
      <title>Creación de servicios</title>

      <para>La creción de servicios se hace mediante el uso de anotaciones y
      para simplificar esta tarea se puede hacer uso de los comandos que
      ofrece gvNIX. A medida que se van ejecutando comandos del add-on se va
      modificando la clase Java añadiendo anotaciones y métodos (operaciones)
      que conformarán el servicio web que se quiere publicar.</para>

      <para>Lo primero que se necesita es definir una clase Java que contendrá
      todos los métodos disponibles en el WS. Una vez creada la clase, debemos
      añadir las operaciones que ofrece el servicio web y exponerlos para que
      sean accesibles. Con <link
      linkend="apendice-comandos_addon-service_class">remote service class</link>
      declaramos la clase Java que ofrece los servicios.</para>

      <para>De momento nuestro servicio no está definido como tal, es decir,
      no se puede publicar puesto que aun no tiene ninguna anotación que el
      framework usará para exponer el servicio. Esto lo coneguimos ejecutanto
      el comando <link
      linkend="apendice-comandos_addon-service_define_ws">remote service define
      ws</link> que añadirá la anotación
      <emphasis>@GvNIXWebService</emphasis>. gvNIX generará los componentes
      necesarios para exponer el servicio web.</para>

      <para>Ahora bien, de momento el servicio tampoco tiene ninguna operación
      accesible, para ello debemos crearlas añadiendo métodos a la clase Java
      y exportarlas. Esto lo logramos mediante <link
      linkend="apendice-comandos_addon-service_operation">remote service
      operation</link>, que añade los métodos a la clase y <link
      linkend="apendice-comandos_addon-service_export_operation">remote service
      export operation</link> que añade la anotación
      <emphasis>@GvNIXWebMethod</emphasis> al método, que informará a gvNIX de
      que debe generar el código necesario para que la operación esté
      accesible.</para>

      <programlisting><emphasis role="bold">@GvNIXWebService</emphasis>(name = "MyWebServicePortType", targetNamespace = "http://services.project.layer.service.test.gvnix.org/", serviceName = "MyWebService", 
                 address = "MyWebService", fullyQualifiedTypeName = "org.gvnix.test.service.layer.project.services.MyWebService", exported = false)
public class MyWebService {

    <emphasis role="bold">@GvNIXWebMethod</emphasis>(operationName = "sayHello", resultName = "void", webResultType = Void.class)
    public void sayHello() {
        return;
    }
}</programlisting>

      <para>El comando <link
      linkend="apendice-comandos_addon-service_list_operation">remote service list
      operations</link> muestra qué operaciones existentes en la clase
      seleccionada están disponibles para ser exportados.</para>

      <para>Existe otra forma para crear servicios. Consiste en generar el
      servicio basado en un archivo WSDL. Con <link
      linkend="apendice-comandos_addon-service_export_ws">remote service export
      ws</link> indicando la ruta a un archivo WSDL (archivo en local o URL en
      Internet) generamos una réplica del servicio en la que las operaciones
      son implementaciones senciallas a modo de ejemplo.</para>

      <para>Para más información sobre estos comandos ver el <link
      linkend="apendice-comandos_addon-service">apendice de comandos
      service</link>.</para>
    </section>

    <section>
      <title>Creación de clientes</title>

      <para>Podemos generar un cliente para un servicio web existente usando
      el comando <link
      linkend="apendice-comandos_addon-service_import_ws">remote service import
      ws</link>. Facilitando la ruta a un WSDL, gvNIX generará la clase que
      contendrá los métdos del cliente.</para>

      <para>Para usar este cliente simplemente hay que crear un campo en la
      clase donde queramos hacer uso de él y añadirle la anotación
      <emphasis>@Autowired</emphasis>.</para>

      <programlisting>public class MyClassUsingWebService {
  ...
  @Autowired
  private ClassOfWebServiceClient classOfWebServiceClient;
  ...
  public void methodUsingWebService() {
    ...
    classOfWebServiceClient.wsOperation(..);
    ...
  }
}</programlisting>

      <para>La ruta al WSDL puede ser tanto un archivo local (file://) como
      una URL a un por HTTP o HTTPS.</para>

      <para>Cuando el WSDL es un archivo local o un recurso que se encuentre
      en un servidor no seguro (acceso HTTP), gvNIX accede al WSLD y tras
      procesarlo realiza las tareas necesarias para generar un servicio local
      que hará las veces de cliente del WS remoto.</para>

      <para>En el caso de que el WSDL lo sirva un servidor seguro al que se
      accede por HTTPS pueden darse dos posibles escenarios:</para>

      <orderedlist>
        <listitem>
          <para>El certificado del servidor ha sido creado por una <emphasis
          role="bold">Autoridad de certificación (CA) confiable por la
          JVM</emphasis>.</para>

          <para>En este caso, el procesado del WSDL funciona de la misma
          manera que en el caso de acceso por HTTP, transparente para el
          usuario.</para>
        </listitem>

        <listitem>
          <para>El certificado de servidor ha sido creado por un <emphasis
          role="bold">CA no confiable</emphasis> (caso de certificados
          autofirmados).</para>

          <para>Aquí, es responsabilidad del usuario el aceptar las
          credenciales del servidor para poder acceder al WSDL. Recordando
          como trabajan los navegadores web, cuando intentamos acceder a un
          recurso seguro, si el certificado del servidor no ha sido creado por
          un CA que se encuentre entre la lista de CAs conocida (Verisign,
          Thwate, Equfax, ...), el navegador nos muestra un mensaje de
          advertencia y nos pregunta si queremos confiar en la identidad del
          servidor. Nosotros podemos, o no, aceptar el certificado.</para>

          <para>Para simplificar el proceso de importación de WS, gvNIX
          intenta hacer esta tarea de "confiar" en el certificado de manera
          transparente para el usuario.</para>

          <para>Para ello, gvNIX manipula el almacen de certificados de la JVM
          siempre que sea posible. Esto es:</para>

          <orderedlist>
            <listitem>
              <para>Existe el archivo de <emphasis>keystore
              $JAVA_HOME/jre/lib/security/cacerts</emphasis> y es modificable
              por el usuario del sistema que está ejecutando gvNIX.</para>
            </listitem>

            <listitem>
              <para>La contraseña del <emphasis>keystore</emphasis> es
              changeit (la contraseña por defecto del keystore).</para>
            </listitem>
          </orderedlist>

          <para>Si gvNIX puede modificar el keystore, importará los
          certificados implicados en la autenticación del servidor y entonces
          podrá acceder al WSDL requerido para generar el cliente del
          WS.</para>

          <para>Al mismo tiempo, se crea en
          <emphasis>src/main/resources</emphasis> una copia del almacen de
          certificados en el archivo gvnix-cacerts y una copia local de los
          certificados importados con el nombre
          <emphasis>&lt;servidor&gt;-&lt;indice_certificado&gt;.cer</emphasis>.
          De esta forma, los certificados pueden ser distribuidos con el resto
          de archivos del proyecto para que puedan ser instalados en otros
          entornos.</para>

          <para>Si gvNIX no puede modificar el keystore de la JVM, porque no
          se cumplen las 2 condiciones enumeradas anteriormente, creará de
          todas formas la copia de los certificados necesarios para que sea el
          usuario quien instale los mismos en el almacen de certificados de su
          JVM. Para ello se puede hacer uso de la herramienta <link
          xlink:href="http://download.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html">keytool</link>
          (distribuida también con el JDK). La operación de importar los
          certificados equivale a la aceptación que hacemos con el
          navegador.</para>
        </listitem>
      </orderedlist>

      <section>
        <title>Añadir firmado de petición a un cliente</title>

        <para>El add-on incorpora una implementación que permite añadir una
        firma digital a la peticiones realizadas a un servicio web
        importado.</para>

        <para>Actualmente esta opción sólo está disponible para los servicio
        web que utilicen la librería Axis. En futuras versiones se añadirá
        servicio para CXF y otra operaciones relacionadas con
        seguridad.</para>

        <para>Para ello necesitamos disponer de:</para>

        <orderedlist>
          <listitem>
            <para>Servicio web importado en la aplicación.</para>
          </listitem>

          <listitem>
            <para>Fichero <emphasis>pkc12</emphasis> con el certificado a usar
            para firmar la petición.</para>
          </listitem>

          <listitem>
            <para>Contraseña del certificado.</para>
          </listitem>

          <listitem>
            <para>Alias a usar con el certificado</para>
          </listitem>
        </orderedlist>

        <para>Disponiendo de esto elementos, usaremos el comando <link
        xlink:href="apendice-comandos_addon-service_security_ws">remote service
        security ws</link> para añadir la operación.</para>
      </section>
    </section>

    <section>
      <title>Lista de servicios web en la aplicación</title>

      <para>El comando <link
      xlink:href="apendice-comandos_addon-service_ws_list">remote service ws
      list</link> permite obtener un listado de los servicios exportados o
      importados en la aplicación.</para>

      <para>El resultado es una salida como esta:</para>

      <programlisting>roo-gvNIX&gt; remote service ws list
service     exported     imported
---------   ---------   ----------
Service1       X
Service2                    X   
Service3                    X   </programlisting>
    </section>
  </section>
</chapter>
