<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="guia-desarrollo_aplicacion-base"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Crear una nueva aplicación</title>

  <para xml:lang="es">Utilizando Spring Roo para desarrollar una aplicación
  web para una <emphasis role="bold">Pizza Shop</emphasis>. Entre los
  requerimientos para la aplicación de la pizzería se incluye la capacidad
  para crear una Pizza por los empleados de la pizzería. La <emphasis
  role="bold">Pizza</emphasis> se compone de una <emphasis
  role="bold">Base</emphasis> y uno o más <emphasis
  role="bold">Toppings</emphasis> (Ingredientes). Además el dueño de la tienda
  quiere permitir que los clientes hagan pedidos a través de la web.</para>

  <para xml:lang="es">Después de esta breve explicación se ha creado un
  diagrama para el modelo de datos.</para>

  <figure>
    <title>Pizza Shop Domain Model</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/pizza.png"></imagedata>
      </imageobject>
    </mediaobject>
  </figure>

  <section xml:id="guia-desarrollo_aplicacion-base_crear-projecto">
    <title xml:lang="es">Crear el proyecto</title>

    <para xml:lang="es">Creamos un nuevo proyecto Roo, para eso hay que crear
    el directorio del proyecto y acceder a la consola de gvNIX:</para>

    <programlisting>bash&gt; <command>mkdir pizza</command>
bash&gt; <command>cd pizza</command>
bash&gt; <command>gvnix</command>
<computeroutput>    ____  ____  ____  
   / __ \/ __ \/ __ \ 
  / /_/ / / / / / / / 
 / _, _/ /_/ / /_/ /  
/_/ |_|\____/\____/    1.1.0.M1 [rev 3a0b8a3]


Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.</computeroutput>
roo&gt;</programlisting>

    <para xml:lang="es">Después accedemos a la consola de Roo y tecleamos
    <command>hint</command> para mostrar la guía en el proceso de creación del
    proyecto:</para>

    <programlisting>roo&gt; <command>hint</command> 
<computeroutput>Welcome to Roo! We hope you enjoy your stay!

Before you can use many features of Roo, you need to start a new project.

To do this, type 'project' (without the quotes) and then hit TAB.

Enter a --topLevelPackage like 'com.mycompany.projectname' (no quotes).
When you've finished completing your --topLevelPackage, press ENTER.
Your new project will then be created in the current working directory.

Note that Roo frequently allows the use of TAB, so press TAB regularly.
Once your project is created, type 'hint' and ENTER for the next suggestion.
You're also welcome to visit http://forum.springframework.org for Roo help.</computeroutput></programlisting>

    <para xml:lang="es">Nos muestra las instrucciones para continuar y crear
    un proyecto, teclear <command>project</command> y pulsar la tecla TAB
    (tabulador) y se mostrará el parámetro
    <parameter>--topLevelPackage</parameter> y definir el paquete principal
    del proyecto en este caso
    <package>com.springsource.roo.pizzashop</package>. Indicamos también con
    que JDK se va a trabajar en el proyecto añadiendo el atributo
    <parameter>--java 5</parameter>, el número 5 corresponde a la versión del
    JDK utilizado, en este caso JDK 1.5, si no se especifica Roo por defecto
    utiliza el JDK 1.6</para>

    <programlisting>roo&gt; <command>project --topLevelPackage com.springsource.roo.pizzashop --java 5</command>
<computeroutput>Created /Users/sschmidt/Development/workspaces/test9/pom.xml
Created SRC_MAIN_JAVA
Created SRC_MAIN_RESOURCES
Created SRC_TEST_JAVA
Created SRC_TEST_RESOURCES
Created SRC_MAIN_WEBAPP
Created SRC_MAIN_RESOURCES/META-INF/spring
Created SRC_MAIN_RESOURCES/META-INF/spring/applicationContext.xml
Created SRC_MAIN_RESOURCES/META-INF/spring/log4j.properties</computeroutput></programlisting>

    <para xml:lang="es">Como vemos la posición del shell ha cambiado, ahora
    estamos dentro del proyecto indicándolo con el nombre del paquete que
    hemos creado como base</para>

    <programlisting>com.springsource.roo.pizzashop roo&gt;</programlisting>

    <important>
      <para xml:lang="es">Si se utiliza el JDK1.5 hay ejecutar las siguientes
      instrucciones para evitar la excepción <errortext>NoClassDefFoundError:
      javax/xml/bind/JAXBException:</errortext><programlisting>roo&gt; <emphasis
            role="bold">dependency add --groupId javax.xml.bind --artifactId jaxb-api --version 2.1</emphasis>
<computeroutput>dependency add --groupId javax.xml.bind --artifactId jaxb-api --version 2.1</computeroutput>
roo&gt; <command>dependency add --groupId com.sun.xml.bind --artifactId jaxb-impl --version 2.1.3</command>
<computeroutput>Managed ROOT/pom.xml [Added dependency com.sun.xml.bind:jaxb-impl:2.1.3]</computeroutput></programlisting></para>
    </important>

    <para xml:lang="es">Se crea una estructura de carpetas parecida a la que
    crea maven.</para>

    <figure>
      <title xml:lang="es">Estructura de carpetas</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/projectfolders.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Configurar el acceso a datos.</title>

    <para xml:lang="es">Ahora se ha de definir el proveedor JPA con la BBDD
    asociada. Volvemos a teclear *hint* y nos muestra el siguiente paso a
    seguir:</para>

    <programlisting>roo&gt; <command>hint</command>
<computeroutput>Roo requires the installation of a JPA provider and associated database.

Type 'persistence setup' and then hit TAB three times.
We suggest you type 'H' then TAB to complete "HIBERNATE".
After the --provider, press TAB twice for database choices.
For testing purposes, type (or TAB) HYPERSONIC_IN_MEMORY.
If you press TAB again, you'll see there are no more options.
As such, you're ready to press ENTER to execute the command.

Once JPA is installed, type 'hint' and ENTER for the next suggestion.</computeroutput>
roo&gt;</programlisting>

    <para xml:lang="es">Creamos la persistencia utilizando los comandos que
    nos muestra y tabulando para que nos muestre las opciones
    disponibles:</para>

    <programlisting>roo&gt; <command>persistence setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY</command>
<computeroutput>Created SRC_MAIN_RESOURCES/META-INF/persistence.xml
Created SRC_MAIN_RESOURCES/META-INF/spring/database.properties
Managed SRC_MAIN_RESOURCES/META-INF/spring/applicationContext.xml
Managed ROOT/pom.xml [Added dependency org.hsqldb:hsqldb:1.8.0.10]
Managed ROOT/pom.xml [Added dependency org.hibernate:hibernate-core:3.5.0-Final]
Managed ROOT/pom.xml [Added dependency org.hibernate:hibernate-entitymanager:3.5.0-Final]
Managed ROOT/pom.xml [Added dependency org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.0.Final]
Managed ROOT/pom.xml [Added dependency org.hibernate:hibernate-validator:4.0.2.GA]
Managed ROOT/pom.xml [Added dependency javax.validation:validation-api:1.0.0.GA]
Managed ROOT/pom.xml [Added dependency cglib:cglib-nodep:2.2]
Managed ROOT/pom.xml [Added dependency javax.transaction:jta:1.1]
Managed ROOT/pom.xml [Added dependency org.springframework:spring-jdbc:${spring.version}]
Managed ROOT/pom.xml [Added dependency org.springframework:spring-orm:${spring.version}]
Managed ROOT/pom.xml [Added dependency commons-pool:commons-pool:1.5.4]
Managed ROOT/pom.xml [Added dependency commons-dbcp:commons-dbcp:1.3]
Managed ROOT/pom.xml</computeroutput>
roo&gt;</programlisting>

    <warning>
      <para><emphasis role="bold">Por defecto las aplicaciones de Spring Roo
      se configuran para que la Base de datos se regenere cada vez que se
      arranca la aplicación (borrando y creando de nuevo las tablas), por lo
      que es conveniente que si se utiliza una Base de datos preexistente se
      configure correctamente el fichero
      <filename>src/main/resources/META-INF/persistence.xml</filename> para
      evitar sorpresas desagradables. Más información <link
      linkend="guia-desarrollo_gestion-entidades_enlazar-base-datos-existente_regeneracion-bbdd">aquí</link>.</emphasis></para>
    </warning>
  </section>

  <section xml:id="guia-desarrollo_aplicacion-base_crear-entidades">
    <title xml:lang="es">Crear las entidades y sus atributos</title>

    <para xml:lang="es">Ahora hay que crear las entidades, con sus atributos y
    las relaciones correspondientes a cada una que se han definido en el
    modelo. Volvemos a teclear <command>hint</command> para que nos muestre el
    siguiente paso y las opciones existentes:</para>

    <programlisting>roo&gt; <command>hint</command>
<computeroutput>You can create entities either via Roo or your IDE.
Using the Roo shell is fast and easy, especially thanks to the TAB completion.

Start by typing 'ent' and then hitting TAB twice.
Enter the --class in the form '~.domain.MyEntityClassName'
In Roo, '~' means the --topLevelPackage you specified via 'create project'.

After specify a --class argument, press SPACE then TAB. Note nothing appears.
Because nothing appears, it means you've entered all mandatory arguments.
However, optional arguments do exist for this command (and most others in Roo).
To see the optional arguments, type '--' and then hit TAB. Mostly you won't
need any optional arguments, but let's select the --testAutomatically option
and hit ENTER. You can always use this approach to view optional arguments.

After creating an entity, use 'hint' for the next suggestion.</computeroutput>
roo&gt;</programlisting>

    <para xml:lang="es">El comando <command>entity</command> tiene un número
    de atributos opcionales mientras que el atributo requerido es
    <parameter>--class</parameter>, además también se debe utilizar
    <parameter>--testAutomatically</parameter> para crear automáticamente los
    test de integración para el <emphasis>Domain Object</emphasis>. Para
    empezar crearemos la entidad <classname>Topping:</classname></para>

    <programlisting>roo&gt; <command>entity --class ~.domain.Topping --testAutomatically</command>
<computeroutput>Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Topping.java
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/ToppingDataOnDemand.java
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/ToppingIntegrationTest.java
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Topping_Roo_Entity.aj
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Topping_Roo_ToString.aj
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Topping_Roo_Configurable.aj
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/ToppingIntegrationTest_Roo_Configurable.aj
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/ToppingDataOnDemand_Roo_DataOnDemand.aj
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/ToppingIntegrationTest_Roo_IntegrationTest.aj
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/ToppingDataOnDemand_Roo_Configurable.aj</computeroutput>
~.domain.Topping roo&gt;</programlisting>

    <para xml:lang="es">Se ha utilizado para la creación de la entidad el
    carácter <literal>~</literal> para situarlo en el paquete base del
    proyecto. Ahora la consola Roo nos lleva dentro de la entidad Topping y
    así poder definir los campos y las relaciones que tenga. En este caso
    añadir el atributo <parameter>name</parameter> utilizando el comando
    <command>entity</command>. Volvemos a teclear <command>hint</command> para
    que Roo nos muestre el siguiente paso a seguir:</para>

    <programlisting>~.domain.Topping roo&gt; <command>hint</command>
<computeroutput>You can add fields to your entities using either Roo or your IDE.

To add a new field, type 'field' and then hit TAB. Be sure to select
your entity and provide a legal Java field name. Use TAB to find an entity
name, and '~' to refer to the top level package. Also remember to use TAB
to access each mandatory argument for the command.

After completing the mandatory arguments, press SPACE, type '--' and then TAB.
The optional arguments shown reflect official JSR 303 Validation constraints.
Feel free to use an optional argument, or delete '--' and hit ENTER.

If creating multiple fields, use the UP arrow to access command history.

After adding your fields, type 'hint' for the next suggestion.
To learn about setting up many-to-one fields, type 'hint relationships'.</computeroutput>
~.domain.Topping roo&gt; <command>field string --fieldName name --notNull --sizeMin 2</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Topping.java
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Topping_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/ToppingDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Topping_Roo_ToString.aj</computeroutput>
~.domain.Topping roo&gt; </programlisting>

    <para xml:lang="es">Utilizando el comando <command>field {tipo}</command>
    se pueden añadir restricciones (constraints) a los campos usando los
    atributos opcionales como <parameter>--notNull</parameter> y
    <parameter>--sizeMin 2</parameter>. Dentro de el contexto de la entidad,
    en este caso <classname>Topping</classname>, Roo añade los atributos a la
    clase utilizando el comando <command>entity</command>. Si se quiere añadir
    el campo a cualquier otra entidad se ha de especificar el atributo
    <parameter>--class</parameter> y la entidad a crear/modificar indicando
    también el paquete al que pertenece.</para>

    <para xml:lang="es">Ahora se han de crear las demás entidades y sus
    respectivos atributos correspondientes al modelo definido:</para>

    <programlisting>~.domain.Topping roo&gt; <command>entity --class ~.domain.Base --testAutomatically</command> 
<computeroutput>Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Base.java
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/BaseDataOnDemand.java
...
...
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/BaseDataOnDemand_Roo_Configurable.aj</computeroutput>
~.domain.Base roo&gt; <command>field string --fieldName name --notNull --sizeMin 2</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Base.java
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Base_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/BaseDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Base_Roo_ToString.aj</computeroutput>
~.domain.Base roo&gt; <command>entity --class ~.domain.Pizza --testAutomatically</command>
<computeroutput>Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza.java
...
...
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaIntegrationTest_Roo_IntegrationTest.aj</computeroutput>
~.domain.Pizza roo&gt; <command>field string --fieldName name --notNull --sizeMin 2</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza.java
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_ToString.aj</computeroutput>
~.domain.Pizza roo&gt; <command>field number --fieldName price --type java.lang.Float</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza.java
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_ToString.aj</computeroutput>
~.domain.Pizza roo&gt; </programlisting>

    <para xml:lang="es">Después de añadir el <varname>nombre</varname> y el
    <varname>precio</varname> a la entidad <classname>Pizza</classname> hay
    que definir las relaciones con <classname>Base</classname> y
    <classname>Topping</classname>. Primero la relación
    <emphasis>m:n</emphasis> (Una <classname>Pizza</classname> puede tener
    varios <classname>Topping</classname> y un <classname>Topping</classname>
    puede ser utilizado en varias <classname>Pizzas</classname>) entre
    <classname>Pizza</classname> y <classname>Topping</classname>. Para crear
    una relación <emphasis>many-to-many</emphasis> Roo proporciona el
    siguiente comando:</para>

    <programlisting>~.domain.Pizza roo&gt; <command>field set --fieldName toppings --element ~.domain.Topping</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza.java
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_JavaBean.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_ToString.aj</computeroutput>
~.domain.Pizza roo&gt;</programlisting>

    <para xml:lang="es">De una manera parecida se definen las relaciones
    <emphasis>1:1</emphasis> entre las entidades Pizza y Base usando el
    comando:</para>

    <programlisting>~.domain.Pizza roo&gt; <command>field reference --fieldName base --type ~.domain.Base</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza.java
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/Pizza_Roo_ToString.aj</computeroutput>
~.domain.Pizza roo&gt;</programlisting>

    <para xml:lang="es">De la misma manera se han de crear las entidades y
    relaciones <classname>PizzaOrder</classname>:</para>

    <programlisting>~.domain.Pizza roo&gt; <command>entity --class ~.domain.PizzaOrder --testAutomatically</command> 
<computeroutput>Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder.java
...
...
Created SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrderIntegrationTest_Roo_IntegrationTest.aj</computeroutput>
~.domain.PizzaOrder roo&gt; <command>field string --fieldName name --notNull --sizeMin 2</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder.java
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrderDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_ToString.aj</computeroutput>
~.domain.PizzaOrder roo&gt; <command>field string --fieldName address --sizeMax 30</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder.java
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrderDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_ToString.aj</computeroutput>
~.domain.PizzaOrder roo&gt; <command>field number --fieldName total --type java.lang.Float</command> 
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder.java
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrderDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_ToString.aj</computeroutput>
~.domain.PizzaOrder roo&gt; <command>field date --fieldName deliveryDate --type java.util.Date</command>
<computeroutput>Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder.java
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_JavaBean.aj
Managed SRC_TEST_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrderDataOnDemand_Roo_DataOnDemand.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_ToString.aj</computeroutput>
~.domain.PizzaOrder roo&gt; <command>field set --fieldName pizzas --element ~.domain.Pizza</command>
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder.java
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_JavaBean.aj
Managed SRC_MAIN_JAVA/com/springsource/roo/pizzashop/domain/PizzaOrder_Roo_ToString.aj
~.domain.PizzaOrder roo&gt; </programlisting>

    <para xml:lang="es">Con esto concluye el diseño del modelo de
    entidades.</para>
  </section>

  <section>
    <title xml:lang="es">Crear la capa web</title>

    <para xml:lang="es">Se han de crear los controllers y las vistas para
    poder visualizar la aplicación web mediante el comando de Roo
    <command>controller</command>:</para>

    <programlisting>~.domain.PizzaOrder roo&gt; <command>controller all --package ~.web</command>
<computeroutput>Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/web
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/web/ToppingController.java
Created SRC_MAIN_WEBAPP/WEB-INF/spring
Created SRC_MAIN_WEBAPP/WEB-INF/spring/webmvc-config.xml
Created SRC_MAIN_JAVA/com/springsource/roo/pizzashop/web/ToppingController_Roo_Controller.aj
Managed ROOT/pom.xml [Added dependency org.apache.tiles:tiles-core:2.2.1]
Managed ROOT/pom.xml [Added dependency org.apache.tiles:tiles-jsp:2.2.1]
Managed SRC_MAIN_WEBAPP/WEB-INF/spring/webmvc-config.xml
Created SRC_MAIN_WEBAPP/images
Created SRC_MAIN_WEBAPP/images/de.png
...
...
Managed SRC_MAIN_WEBAPP/WEB-INF/views/menu.jspx
Managed SRC_MAIN_WEBAPP/WEB-INF/views/bases/views.xml
Created SRC_MAIN_WEBAPP/WEB-INF/views/bases/update.jspx
Managed SRC_MAIN_WEBAPP/WEB-INF/views/bases/views.xml
Managed SRC_MAIN_WEBAPP/WEB-INF/i18n/application.properties
Managed SRC_MAIN_WEBAPP/WEB-INF/views/menu.jspx
~.web roo&gt; </computeroutput></programlisting>

    <para xml:lang="es">Este comando ha creado la estructura de visualización
    y los controllers asociados a partir de la definición de las
    entidades.</para>
  </section>

  <section xml:id="guia-desarrollo_aplicacion-base_test-integracion">
    <title xml:lang="es">Test de integración</title>

    <para xml:lang="es">Después de haber creado la primera iteración del
    modelo de objetos se puede hacer la comprobación ejecutando los test de
    integración que se han ido creando a medida que añadíamos una entidad (que
    naturalmente funcionarán correctamente). Para ejecutar los test
    utilizaremos el comando <command>perform tests</command>:</para>

    <programlisting>~.domain.PizzaOrder roo&gt; <command>perform test</command>
<computeroutput>[Thread-4] [INFO] Scanning for projects...
[Thread-4] [INFO] ------------------------------------------------------------------------
[Thread-4] [INFO] Building pizzashop
[Thread-4] [INFO]    task-segment: [test]
[Thread-4] [INFO] ------------------------------------------------------------------------
[Thread-4] [INFO] [aspectj:compile {execution: default}]
...
...
[Thread-4] -------------------------------------------------------
[Thread-4]  T E S T Soo&gt; 
[Thread-4] -------------------------------------------------------
[Thread-4] Running com.springsource.roo.pizzashop.domain.PizzaOrderIntegrationTest
[Thread-4] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.389 sec
[Thread-4] Running com.springsource.roo.pizzashop.domain.ToppingIntegrationTest
[Thread-4] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.174 sec
[Thread-4] Running com.springsource.roo.pizzashop.domain.PizzaIntegrationTest
[Thread-4] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.145 sec
[Thread-4] Running com.springsource.roo.pizzashop.domain.BaseIntegrationTest
[Thread-4] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.137 sec
[Thread-4] zzaOrder roo&gt; 
[Thread-4] Results :roo&gt; 
[Thread-4] zzaOrder roo&gt; 
[Thread-4] Tests run: 36, Failures: 0, Errors: 0, Skipped: 0
[Thread-4] zzaOrder roo&gt; 
[Thread-4] [INFO] ------------------------------------------------------------------------
[Thread-4] [INFO] BUILD SUCCESSFUL
[Thread-4] [INFO] ------------------------------------------------------------------------
[Thread-4] [INFO] Total time: 17 seconds
[Thread-4] [INFO] Finished at: Wed Jun 16 21:10:22 CEST 2010
[Thread-4] [INFO] Final Memory: 45M/299M
[Thread-4] [INFO] ------------------------------------------------------------------------</computeroutput>
~.domain.PizzaOrder roo&gt;</programlisting>
  </section>

  <section xml:id="guia-desarrollo_aplicacion-base_usar-eclipse">
    <title xml:id="es">Utilizar Eclipse como IDE</title>

    <para xml:lang="es">Para crear una estructura de proyecto eclipse Roo hay
    que utilizar el comando <command>perform eclipse</command>:</para>

    <programlisting>~.domain.PizzaOrder roo&gt; <command>perform eclipse</command>
<computeroutput>[Thread-6] Warning: JAVA_HOME environment variable is not set.
[Thread-6] [INFO] Scanning for projects...
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] Building pizzashop
[Thread-6] [INFO]    task-segment: [eclipse:clean, eclipse:eclipse]
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] [eclipse:clean {execution: default-cli}]
[Thread-6] [INFO] Deleting file: .project
[Thread-6] [INFO] Deleting file: .classpath
...
...
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] BUILD SUCCESSFUL
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] Total time: 4 seconds
[Thread-6] [INFO] Finished at: Wed Jun 16 21:21:49 CEST 2010
[Thread-6] [INFO] Final Memory: 36M/330M
[Thread-6] [INFO] ------------------------------------------------------------------------</computeroutput>
~.domain.PizzaOrder roo&gt;</programlisting>

    <para xml:lang="es">Este comando termina ejecutando un <command>mvn
    eclipse:eclipse</command> para el proyecto, por lo que es indiferente el
    uso de ambos métodos.</para>

    <para xml:lang="es">Ahora se ha de importar al entorno de trabajo mediante
    <command>File -&gt; Import -&gt; Existing Projects into
    workSpace</command>.</para>

    <para xml:lang="es">También es posible borrar la configuración de eclipse
    ejecutando el comando <command>mvn eclipse:clean</command>. Para regenerar
    la configuración de eclipse en un solo comando usar <command>mvn
    eclipse:clean eclipse:eclipse</command>.</para>
  </section>

  <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion">
    <title xml:lang="es">Arrancar la aplicación web</title>

    <para xml:lang="es">Ahora solamente queda poner en marcha la aplicación
    web para esto debemos salir de la consola de Roo mediante el comando
    <command>quit</command>. Al situarnos de nuevo en el shell, en la carpeta
    raíz del proyecto se ha de ejecutar la orden <command>mvn
    tomcat:run</command>.</para>

    <para>Para poder ver en funcionamiento la aplicación debemos acceder a la
    dirección: <uri>http://localhost:8080/pizzashop</uri></para>
  </section>

  <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse">
    <title xml:lang="es">Arrancar la aplicación con Eclipse</title>

    <para xml:lang="es">Es posible arrancar la aplicación desde el propio
    Eclipse y que, además de permitir depurarla, nos permita hacer algunos
    cambios en caliente sobre la aplicación.</para>

    <para xml:lang="es">Para ello, debemos tener la aplicación importada en un
    <emphasis>workspace</emphasis> de Eclipse (ver como hacerlo <link
    linkend="guia-desarrollo_aplicacion-base_usar-eclipse">aquí</link>) y
    configurar el servidor dónde queremos ejecutarlo. Eclipse es capaz de
    gestionar distinto tipos de servidores, generando sus propios directorio y
    ficheros de configuración.</para>

    <para xml:lang="es">Para prepara un servido seguiremos los siguiente
    pasos:</para>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_mostrar-vista-servidores">
      <title>Mostrar la Vista de Servidores de Eclipse</title>

      <para>Eclipse tiene una vista que permite ver los distintos servidores
      configurados y gestionarlos desde ahí. Estos son los pasos para mostrar
      la vista:</para>

      <orderedlist>
        <listitem>
          <para>Abra una perspectiva de desarrollo Java (Java o java).</para>
        </listitem>

        <listitem>
          <para>Abra la opción del menú <literal>Window/Show
          view/Other...</literal>.</para>
        </listitem>

        <listitem>
          <para>Busque la vista llamada <literal>Servers</literal> y pulse el
          botón <literal>Ok</literal>.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_crear-entorno-ejecucion">
      <title xml:lang="es">Crear un entrono de ejecución de Server (Server
      Runtime environment)</title>

      <para xml:lang="es">Se pueden definir múltiples entornos de ejecución
      para los servidores. Esta configuración incluye el tipo de servidor
      (Tomcat, Jetty, JBoss, etc..), Máquina Virtual Java (JRE 1.5, JRE 1.6,
      etc...) y la ruta a los binarios del servidor.</para>

      <para xml:lang="es">Cabe destacar que eclipse <emphasis role="bold">no
      usa la configuración que exista en la instalación del
      servidor</emphasis> en la mayoría de los casos. Solo usa los ejecutables
      para arrancarlo con ficheros de configuración que almacena en el propio
      workspace.</para>

      <para xml:lang="es">En este caso, vamos a prepara el entrono para Tomcat
      6 (para Tomcat 5.5 ver <link linkend="addon-web-mvc-jsp-2.0">Add-on Web
      MVC JSP 2.0</link>) que es uno de los entornos que se usan
      frecuentemente para arrancar la aplicaciones de Spring Roo.</para>

      <para xml:lang="es">Asumimos que disponemos de una instalación de Tomcat
      6 en nuestra máquina, no importa que esté configurada o no, y seguiremos
      los siguientes pasos:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">Abrir el diálogo de preferencias de Eclipse
          desde el menú <literal>Window/Preferences</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Ir al Panel de configuración de los entornos de
          servidor que se encuentra en <literal>Server/Runtime
          environments</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Pulsar el botón
          <literal>Add...</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione <literal>Apache Tomcat v6.0</literal>
          de la lista de tipos y pulse el botón
          <literal>Next</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Introduzca un nombre para la
          configuración.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione el directorio donde se encuentra la
          instalación de Tomcat 6.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione la máquina virtual Java con la que
          ejecutar el servidor.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Pulse el botón <literal>Finish</literal>.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_crear-servidor">
      <title xml:lang="es">Crear una configuración de Servidor</title>

      <para xml:lang="es">Una configuración de servidor se compone del <link
      linkend="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_crear-entorno-ejecucion">entrono
      de ejecución</link>, una o varias aplicaciones a arrancar y una
      configuración del servicio (puertos, parámetros de memoria, recursos,
      variables...). Eclipse permite crear todas las configuraciones que
      necesitemos con las combinaciones posibles.</para>

      <para xml:lang="es">Para crear una nueva configuración siga los pasos
      siguientes:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">En <link
          linkend="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_mostrar-vista-servidores">vista
          de servidores</link>, pulsar botón derecho sobre el fondo y
          seleccionar <literal>New/Server</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione el tipo de servidor (<literal>Tomcat
          v6.0</literal> en nuestro caso) del la lista <literal>server
          type</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Establezca el nombre para el nuevo
          servidor.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione el <link
          linkend="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_crear-entorno-ejecucion">entrono
          de ejecución</link> que debe usar el servidor.</para>
        </listitem>

        <listitem>
          <para>Añada las aplicaciones a ejecutar en este servidor de entre
          las disponibles.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_ajustar-configuracion-server">
      <title xml:lang="es">Ajustar la configuración del Servidor</title>

      <para xml:lang="es">Puede ser necesario ajustar algunas opciones de la
      configuración del servidor. Para poder acceder a dichas opciones hay que
      seleccionar el servidor desde la <link
      linkend="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_mostrar-vista-servidores">vista
      de servidores</link> y, con el botón derecho del ratón sobre el pulsar
      <literal>Open</literal>.</para>

      <para xml:lang="es">Desde el panel abierto podremos gestionar:</para>

      <itemizedlist>
        <listitem>
          <para>Datos generales del servidor.</para>
        </listitem>

        <listitem>
          <para>Opciones de publicación y seguridad.</para>
        </listitem>

        <listitem>
          <para>TimeOuts (muy útil si se está depurando algún proceso de
          arranque).</para>
        </listitem>

        <listitem>
          <para>Puertos</para>
        </listitem>

        <listitem>
          <para>Configuración de tipos MIME.</para>
        </listitem>

        <listitem>
          <para>Las aplicaciones/modulos a lanzar (admite módulos
          externos).</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>
