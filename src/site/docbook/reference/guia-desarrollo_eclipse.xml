<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="guia-desarrollo-eclipse" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:lang="es">Desarrollo con Eclipse</title>

  <section xml:id="guia-desarrollo_eclipse-instalar">
    <title xml:lang="es">Prerrequisitos</title>

    <para><emphasis><emphasis>Necesitas lo
    siguiente:</emphasis></emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Descargar Eclipse IDE for Java EE Developers, versión Helios SR2
        (3.6.2): <link
        xlink:href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/heliossr2">http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/heliossr2</link></para>
      </listitem>

      <listitem>
        <para>Crear la variable de classpath de Eclipse M2_REPO, para
        ello:</para>

        <orderedlist>
          <listitem>
            <para><emphasis role="bold"><emphasis><literal>Window &gt;
            Preferences &gt; Java &gt; Build Path &gt; Classpath
            Variables</literal></emphasis></emphasis>, botón
            <emphasis><emphasis><literal>New...</literal></emphasis></emphasis>.</para>
          </listitem>

          <listitem>
            <para>Ponemos los siguientes valores:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis><emphasis><literal>Name</literal></emphasis></emphasis>
                =
                <emphasis><emphasis><literal>M2_REPO</literal></emphasis></emphasis>.</para>
              </listitem>

              <listitem>
                <para><emphasis><emphasis><literal>Path</literal></emphasis></emphasis>
                = directorio correspondiente al repositorio de Maven
                (normalmente en Linux: ~/.m2/repository)</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para><emphasis>Ok</emphasis> para crear la variable, y
            <emphasis>Ok</emphasis> de nuevo para cerrar la ventana de
            preferencias y guardar cambios.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Instalar plugin M2Eclipse para Eclipse
        (http://m2eclipse.sonatype.org/installing-m2eclipse.html)</para>

        <para>En el menú Help &gt; Install New Software. En el campo de texto
        "Work with:" indicar que se usará el site:
        http://m2eclipse.sonatype.org/sites/m2e. A continución se nos mostrará
        para seleccionar "Maven Integration for Eclipse". Lo selecionamos,
        pulsamos en siguiente y tras aceptar la licencia del plugin
        instalamos.</para>
      </listitem>

      <listitem>
        <para>Activa la opción <emphasis><emphasis><literal>Enable Window &gt;
        Preferences &gt; General &gt; Workspace &gt; Refresh
        Automatically</literal></emphasis></emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>Para utilizar Eclipse como IDE de desarrollo de los proyectos gvNIX
    se recomienda utilizar la extensión <link
    xlink:href="http://www.springsource.com/products/sts">SpringSource Tool
    Suite</link> (o STS).</para>

    <para>Entre otras funcionalidades incorpora un intérprete de comandos de
    Roo que permite ejecutar órdenes sin necesidad de salir de Eclipse.</para>

    <para>Existen 2 distribuciones del STS (se recomienda la segunda):</para>

    <orderedlist>
      <listitem>
        <para>Instalación como <link
        xlink:href="http://www.springsource.com/products/springsource-tool-suite-download">RCP</link>.</para>
      </listitem>

      <listitem>
        <para>Instalación como plugin de nuestro Eclipse: para instalar el
        plugin STS sigue las instrucciones del punto "UPDATE SITE
        INSTALLATION" del documento <link
        xlink:href="http://dist.springsource.com/release/STS/doc/STS-installation_instructions.pdf">Spring
        Source Tool Suite Installation Instructions</link>.</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Consola gvNIX / Roo integrada en Eclipse</title>

    <para>El plugin STS que hemos instalado en nuestro IDE nos ofrece la
    posibilidad de incluir la consola de gvNIX en el propio entrono de
    desarrollo. Para ello antes tendremos que indicarle a Eclipse donde
    tenemos instalada la nueva versión de gvNIX.</para>

    <para>En el menú Window &gt; Preferences &gt; Spring &gt; Roo Support.
    Pulsamos el botón Add y buscamos en el navegador de archivos donde está el
    directorio gvNIX. Veremos una pantalla similar a esta:</para>

    <figure>
      <title>Configuración del soporte gvNIX en Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/preferences_roo.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Dandole a OK en las dos pantallas que tenemos abiertas ya tendremos
    configurado el soporte para la linea de comandos de gvNIX. Para poder
    usarlo tendremos que abrir la perspectiva de Spring (Window &gt; Open
    Perspective &gt; Other &gt; Spring). En la parte inferior de la pantalla
    tendremos una pestaña Roo Shell.</para>

    <para>Nos pedirá que le indiquemos para que proyectos queremos que esté
    disponible la línea de comandos (<emphasis>Open Roo Shell for projects
    ...</emphasis>). Selecionamos el proyecto en el que estamos trabajando y
    ya podremos empezar a ejecutar comandos.</para>

    <figure>
      <title>Consola gvNIX en Eclipse</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/eclipse_gvNIX_shell.png"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <note>
      <para>Hay que tener en cuenta una pequeña diferencia a la hora de usar
      la línea de comandos desde Eclipse con respecto a la linea de comandos
      de gvNIX en la consola del sistema. Mientras en una consola del sistema
      usamos la tecla TAB para que nos ayude a completar los comandos, en el
      IDE usaremos Ctrl+Space que es el atajo por defecto usado en
      Eclipse.</para>
    </note>
  </section>

  <section xml:id="guia-desarrollo_eclipse-usasr">
    <title>Utilizar Eclipse como IDE</title>

    <section xml:id="guia-desarrollo_eclipse-usar">
      <title xml:id="es">Crear proyecto gvNIX/Roo en Eclipse IDE</title>

      <para xml:lang="es">Podemos crear un proyecto gvNIX desde Eclipse a
      través del menú: <emphasis>File &gt; New &gt; Spring Roo
      Project</emphasis>:</para>

      <figure>
        <title>Nuevo proyecto Srping Roo con soporte gvNIX</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/eclipse_new_roo_project.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para xml:lang="es">Ahora añadiremos el soporte para el manejo de la
      persistencia de datos a traves de JPA. El siguiente ejemplo muestra los
      comandos que debe usar para configurar el soporte JPA. Recuerde que
      puede usar Ctrl+Space como ayuda a la escritura en los comandos:</para>

      <para xml:lang="es">En este punto ya tiene un proyecto Maven de
      aplicación web preparado.</para>

      <programlisting>roo&gt; <emphasis role="bold">persistence setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY</emphasis>
Created ...
~.Timer roo&gt;<emphasis role="bold"> entity --class ~.Timer --testAutomatically</emphasis> 
Created ...
~.Timer roo&gt;<emphasis role="bold"> field string --fieldName message --notNull</emphasis>
Managed ...</programlisting>

      <para xml:lang="es">El comando <emphasis role="bold">persistence
      setup</emphasis> nos permite configurar la capa de accesso a datos de
      manera sencilla. <emphasis role="bold">entitiy</emphasis> sirve para
      crear una nueva entidad y <emphasis role="bold">field</emphasis> crea
      atributos de la entidad. Veremos estos comandos con un poco más de
      detalle en la sección <link
      linkend="guia-desarrollo-acceso-datos_persistencia-objetos">Persistencia
      de objetos</link> y <link
      linkend="guia-desarrollo_gestion-entidades_definicion_crear-con-comando">Crear
      una entidad con el intérprete de comandos</link>, también veremos como
      generar todas las entidades de nuestra aplicación mediante el proceso de
      ingenieria inversa conta un esquema de BBDD existente.</para>

      <programlisting>~.Timer roo&gt; <emphasis role="bold">controller all --package ~.web</emphasis>
Created ...</programlisting>

      <para><emphasis role="bold">controller</emphasis> crea controladores de
      la capa web que gestionaran la interacción del usuario con la
      aplicación. Lo veremos en <link
      linkend="guia-desarrollo_web_definir-controller">Crear la capa web con
      el intérprete de comandos</link>.</para>

      <programlisting>~.web roo&gt; <emphasis role="bold">selenium test --controller ~.web.TimerController</emphasis>
Created ...</programlisting>

      <para>Si queremos incluir en el proyecto test de integración tenemos a
      nuestra disposición el comando <emphasis role="bold">selenium
      test</emphasis> que generará los scripts necesarios para probar la
      interfaz web de la aplicación. Mediante <emphasis role="bold">mvn
      selenium:selenese</emphasis>, estando el servidor de la aplicación
      corriendo, se ejecutará el conjunto de tests sobre una nueva instancia
      del navegador FireFox.</para>

      <programlisting>~.web roo&gt; <emphasis role="bold">theme install --id cit</emphasis>
~.web roo&gt; <emphasis role="bold">theme set --id cit</emphasis></programlisting>

      <para>Mediante el comando <emphasis role="bold">theme</emphasis>, del
      <emphasis>Add-on Theme Manager</emphasis> propio de gvNIX, podemos
      configurar el tema visual que presentará la aplicación.</para>
    </section>

    <section>
      <title>Importar proyecto gvNIX a Eclipse IDE</title>

      <para>Como gvNIX/Roo permite crear proyectos desde la linea de comandos,
      podemos vernos en la situación de que queramos importar un proyecto
      existente al IDE. Si estamos ejecutando gvNIX en la línea de comandos,
      bastaría con ejecutar el comando <command>perform eclipse</command> para
      crear una estructura de proyecto Eclipse:</para>

      <programlisting>~.domain.PizzaOrder roo&gt; <command>perform eclipse</command>
<computeroutput>[Thread-6] Warning: JAVA_HOME environment variable is not set.
[Thread-6] [INFO] Scanning for projects...
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] Building pizzashop
[Thread-6] [INFO]    task-segment: [eclipse:clean, eclipse:eclipse]
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] [eclipse:clean {execution: default-cli}]
[Thread-6] [INFO] Deleting file: .project
[Thread-6] [INFO] Deleting file: .classpath
...
...
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] BUILD SUCCESSFUL
[Thread-6] [INFO] ------------------------------------------------------------------------
[Thread-6] [INFO] Total time: 4 seconds
[Thread-6] [INFO] Finished at: Wed Jun 16 21:21:49 CEST 2010
[Thread-6] [INFO] Final Memory: 36M/330M
[Thread-6] [INFO] ------------------------------------------------------------------------</computeroutput>
~.domain.PizzaOrder roo&gt;</programlisting>

      <para xml:lang="es">Este comando termina ejecutando un <command>mvn
      eclipse:eclipse</command> para el proyecto, por lo que es indiferente el
      uso de ambos métodos.</para>

      <para xml:lang="es">Ahora se ha de importar al entorno de trabajo
      mediante <command>File -&gt; Import -&gt; Existing Projects into
      workSpace</command>. Si aparece el mensaje <emphasis>Turn Weaving
      Service on?</emphasis>, marca la casilla <emphasis>Don't ask again until
      next upgrade</emphasis> y clic en <emphasis>Yes</emphasis> (tendrás que
      reiniciar Eclipse).</para>

      <para xml:lang="es">También es posible borrar la configuración de
      eclipse ejecutando el comando <command>mvn eclipse:clean</command>. Para
      regenerar la configuración de eclipse en un solo comando usar
      <command>mvn eclipse:clean eclipse:eclipse</command>.</para>
    </section>
  </section>

  <section xml:id="guia-desarrollo_eclipse-pruebas-unitarias">
    <title xml:lang="es">Desarollo de pruebas unitarias</title>

    <para><emphasis>TBC</emphasis></para>
  </section>

  <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse">
    <title xml:lang="es">Arrancar la aplicación con Eclipse</title>

    <para xml:lang="es">Es posible arrancar la aplicación desde el propio
    Eclipse y que, además de permitir depurarla, nos permita hacer algunos
    cambios en caliente sobre la aplicación.</para>

    <para xml:lang="es">Para que Eclipse nos permita arrancar la aplicación
    desde el servidor, nuestro proyecto tienen que tener constancia de que
    puede usar el plugin de Tomcat. Si hemos creado el proyecto desde Eclipse,
    nuestro poyecto no tiene esta información. La forma más sencilla de
    conseguir esto es ejecutando el comando <emphasis role="bold">mvn
    eclipse:eclipse</emphasis>. Esta operación se puede ejecutar tanto desde
    Eclipse con la ayuda del plugin <emphasis role="bold">M2Eclipse</emphasis>
    como desde la linea de comandos del sistema en el directorio raiz del
    proyecto. En Eclipse desde el menú contextual <emphasis>Run As &gt; Maven
    build</emphasis> nos mostrará la ventana <emphasis role="bold">Edit
    configuration</emphasis> en la que podemos indicar como <emphasis
    role="bold">Goal</emphasis> <emphasis>eclipse:eclipse</emphasis>. Esta
    configuaración se guardará para próximas veces. Tras ejecutarlo tendremos
    nuestra aplicación lista para arrancarla en el Tomcat que hemos
    configurado en el IDE.</para>

    <para xml:lang="es">Para ello, debemos tener la aplicación importada en un
    <emphasis>workspace</emphasis> de Eclipse y configurar el servidor dónde
    queremos ejecutarlo. Eclipse es capaz de gestionar distinto tipos de
    servidores, generando sus propios directorio y ficheros de
    configuración.</para>

    <para xml:lang="es">Para prepara un servidor seguiremos los siguiente
    pasos:</para>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_mostrar-vista-servidores">
      <title>Mostrar la Vista de Servidores de Eclipse</title>

      <para>Eclipse tiene una vista que permite ver los distintos servidores
      configurados y gestionarlos desde ahí. Estos son los pasos para mostrar
      la vista:</para>

      <orderedlist>
        <listitem>
          <para>Abra una perspectiva de desarrollo Java (Java o java).</para>
        </listitem>

        <listitem>
          <para>Abra la opción del menú <literal>Window &gt; Show view &gt;
          Other..</literal>..</para>
        </listitem>

        <listitem>
          <para>Busque la vista llamada <literal>Servers</literal> y pulse el
          botón <literal>Ok</literal>.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_crear-entorno-ejecucion">
      <title xml:lang="es">Crear un entrono de ejecución de Server (Server
      Runtime environment)</title>

      <para xml:lang="es">Se pueden definir múltiples entornos de ejecución
      para los servidores. Esta configuración incluye el tipo de servidor
      (Tomcat, Jetty, JBoss, etc..), Máquina Virtual Java (JRE 1.5, JRE 1.6,
      etc...) y la ruta a los binarios del servidor.</para>

      <para xml:lang="es">Cabe destacar que eclipse <emphasis role="bold">no
      usa la configuración que exista en la instalación del
      servidor</emphasis> en la mayoría de los casos. Solo usa los ejecutables
      para arrancarlo con ficheros de configuración que almacena en el propio
      workspace.</para>

      <para xml:lang="es">En este caso, vamos a preparar el entorno para
      Tomcat 6.</para>

      <para xml:lang="es">Asumimos que disponemos de una instalación de Tomcat
      6 en nuestra máquina, no importa que esté configurada o no, y seguiremos
      los siguientes pasos:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">Abrir el diálogo de preferencias de Eclipse
          desde el menú <literal>Window &gt; Preferences</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Ir al Panel de configuración de los entornos de
          servidor que se encuentra en <literal>Server &gt;Runtime
          environments</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Pulsar el botón
          <literal>Add...</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione <literal>Apache Tomcat v6.0</literal>
          de la lista de tipos y pulse el botón
          <literal>Next</literal>.</para>

          <para xml:lang="es">En el caso en que no aparezca ningún tipo de
          servidor o no aparezcan los de Apache Tomcat se ha de realizar lo
          siguiente:</para>

          <itemizedlist>
            <listitem>
              <para>Ir a <literal>Help &gt; Install New
              Software...</literal>.</para>
            </listitem>

            <listitem>
              <para>Desmarcar la casilla "<emphasis>Hide items that are
              already installed.</emphasis>"</para>
            </listitem>

            <listitem>
              <para>En "<emphasis>Work With</emphasis>" seleccionar el sitio
              "<emphasis>Eclipse Web Tools Platform Repository</emphasis> -
              <emphasis>http://download.eclipse.org/webtools/updates/</emphasis>"
              (si no aparece, añadirlo usando el botón
              <literal>Add...</literal>.)</para>
            </listitem>

            <listitem>
              <para>En el listado de software desplegar <literal>Web Tools
              Platform Tests (WST Tests)</literal> (si hay más de un
              <emphasis>WST Tests</emphasis> seleccionar el de la última
              versión).</para>
            </listitem>

            <listitem>
              <para>Instalar (seleccionándolos) <literal>WST Server
              tests</literal> y <literal>JST Server Tests</literal> (si ya
              están instalado aparecerá su icono en gris)</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para xml:lang="es">Introduzca un nombre para la
          configuración.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione el directorio donde se encuentra la
          instalación de Tomcat 6.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione la máquina virtual Java con la que
          ejecutar el servidor.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Pulse el botón <literal>Finish</literal>.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_crear-servidor">
      <title xml:lang="es">Crear una configuración de Servidor</title>

      <para xml:lang="es">Una configuración de servidor se compone del entorno
      de ejecución, una o varias aplicaciones a arrancar y una configuración
      del servicio (puertos, parámetros de memoria, recursos, variables...).
      Eclipse permite crear todas las configuraciones que necesitemos con las
      combinaciones posibles.</para>

      <para xml:lang="es">Para crear una nueva configuración siga los pasos
      siguientes:</para>

      <orderedlist>
        <listitem>
          <para xml:lang="es">En vista de servidores, pulsar botón derecho
          sobre el fondo y seleccionar <literal>New/Server</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione el tipo de servidor (<literal>Tomcat
          v6.0</literal> en nuestro caso) del la lista <literal>server
          type</literal>.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Establezca el nombre para el nuevo
          servidor.</para>
        </listitem>

        <listitem>
          <para xml:lang="es">Seleccione el entorno de ejecución que debe usar
          el servidor.</para>
        </listitem>

        <listitem>
          <para>Añada las aplicaciones a ejecutar en este servidor de entre
          las disponibles.</para>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="guia-desarrollo_aplicacion-base_arrancar-aplicacion-eclipse_ajustar-configuracion-server">
      <title xml:lang="es">Ajustar la configuración del Servidor</title>

      <para xml:lang="es">Puede ser necesario ajustar algunas opciones de la
      configuración del servidor. Para poder acceder a dichas opciones hay que
      seleccionar el servidor desde la vista de servidores y, con el botón
      derecho del ratón sobre el pulsar <literal>Open</literal>.</para>

      <para xml:lang="es">Desde el panel abierto podremos gestionar:</para>

      <itemizedlist>
        <listitem>
          <para>Datos generales del servidor.</para>
        </listitem>

        <listitem>
          <para>Opciones de publicación y seguridad.</para>
        </listitem>

        <listitem>
          <para>TimeOuts (muy útil si se está depurando algún proceso de
          arranque).</para>
        </listitem>

        <listitem>
          <para>Puertos</para>
        </listitem>

        <listitem>
          <para>Configuración de tipos MIME.</para>
        </listitem>

        <listitem>
          <para>Las aplicaciones/modulos a lanzar (admite módulos
          externos).</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Ejecución de la aplicación en el Servidor</title>

      <para>Para que Eclipse nos permita arrancar la aplicación desde el
      servidor, nuestro projecto tienen que tener constancia de que puede usar
      el plugin de Tomcat. La forma más sencilla de conseguir esto es
      ejecutando el comando <emphasis role="bold">mvn
      eclipse:eclipse</emphasis>. Esta operación se puede ejecutar tanto desde
      Eclipse con la ayuda del plugin <emphasis
      role="bold">M2Eclipse</emphasis> como desde la linea de comandos del
      sistema en el directorio raiz del proyecto. En Eclipse desde el menú
      contextual <emphasis>Run As &gt; Maven build</emphasis> nos mostrará una
      ventana en la que podemos seleccionar el goal eclipse:eclipse. Tras
      ejecutarlo tendremos nuestra aplicación lista para arrancarla en el
      Tomcat que hemos configurado en el IDE.</para>

      <para>Una vez configurado el servidor de nuestra aplicación podemos
      arracar el servidor y probar nuestra aplicación.</para>

      <figure>
        <title>Vista de servidores disponibles en nuestro workspace de
        Eclipse</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/eclipse_servers.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>En la imagen anterior vemos disponible un servidor Tomcat 6 con
      nuestra aplicación <emphasis>tenminutes</emphasis> disponible para
      ejecutar. Con los botones que tenemos a nuestra disposición podemos,
      arrancar la aplicación en modo debug, arrancar la aplicación de manera
      normal, arrancar en modo profile, pararlo o re-publicar los cambios que
      tengamos en la aplicación si estamos haciendo modificaciones.</para>

      <para>Una vez arrancado nuestro servidor podemos navegar por nuestra
      aplicación bien desde un navegador externo (Firefox) o bien desde un
      navegador que incorpora Eclipse. Para abrir el navegador interno de
      Eclipse: Window &gt; Show view &gt; Internal Web Browser.</para>

      <figure>
        <title>Navegador interno de Eclipse</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/eclipse_browser.png"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Ejecutar la apliación desde Eclipse puede ser muy útil a la hora
      de hacer cambios en el proyecto, modificaciones en las vistas, en los
      objetos de aplicación, bien desde el propio IDE o desde la línea de
      comandos de gvNIX, ya que automáticamente veremos reflejados los cambios
      en el navegador.</para>
    </section>
  </section>

  <section xml:id="guia-desarrollo_eclipse-importante">
    <title>IMPORTANTE</title>

    <important>
      <para><emphasis role="bold">A lo largo de la presente guía de referencia
      se realizan ejemplos mediante la ejecución de comandos desde la línea de
      comandos de gvNIX en la consola del sistema. Estos ejemplos pueden
      ejecutarse igualmente desde la consola gvNIX/Roo que integra el plugin
      SpringSource Tool Suite de Eclpse.</emphasis></para>
    </important>

    <important>
      <para><emphasis role="bold">Los comandos <emphasis>perform</emphasis> de
      gvNIX/Roo hacen uso de la herraminta Maven. Ya que tenemos instalado en
      Eclipse el plugin M2Eclipse, estos comandos no pueden ser ejecutados
      desde la consola gvNIX/Roo. Estos comandos pueden lanzarse desde la
      consola gvNIX/Roo en la linea de comandos del sistema o bien crear
      configuraciones de ejecución de tareas Maven desde <emphasis>Run As &gt;
      Maven build ... </emphasis>en Eclipse.</emphasis></para>
    </important>
  </section>
</chapter>
