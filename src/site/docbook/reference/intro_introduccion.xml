<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="introduccion" xml:lang="es"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Introducción</title>

  <section xml:id="introduccion_que-es-gvnix">
    <title xml:lang="es">¿Qué es gvNIX?</title>

    <para xml:lang="es">gvNIX es un entorno de trabajo Java de código abierto
    para el desarrollo rápido de aplicaciones web, altamente productivo,
    flexible y que no compromete la calidad de los proyectos.</para>

    <para xml:lang="es">Está compuesto de un conjunto de herramientas de
    código abierto entre las que destaca su núcleo, <link
    xlink:href="http://www.springsource.org/roo">Spring Roo</link>. Esto le
    proporciona un amplio apoyo por parte de importantes organizaciones como
    Spring Source y VMWare. Añade funcionalidades de productividad de alto
    nivel a las prestaciones que ya se obtienen con <link
    xlink:href="http://www.springsource.org/roo">Spring Roo</link>.</para>

    <para xml:lang="es">gvNIX es un proyecto subvencionado y liderado por la
    Conselleria de Infraestructuras, Transporte y Medio Ambiente de la
    Generalitat Valenciana.</para>

    <para xml:lang="es">gvNIX está disponible dentro del proyecto de Migración
    a Software de fuentes abiertas de la Conselleria d'Infraestructures i
    Transports: <link
    xlink:href="http://www.gvpontis.gva.es">gvPONTIS</link>.</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es"><link xlink:href="http://www.gvnix.org">Comunidad
        online de gvNIX</link></para>

        <para xml:lang="es"><link
        xlink:href="http://gvnix.googlecode.com">Proyecto gvNIX en Google
        Code</link></para>

        <para xml:lang="es"><link
        xlink:href="http://www.gvpontis.gva.es/cast/gvnix/">Página de gvNIX
        dentro del proyecto gvPONTIS</link></para>

        <para xml:lang="es"><link
        xlink:href="http://www.springsource.org/spring-roo">Página oficial de
        Spring Roo</link></para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title xml:lang="es">¿Qué es Spring Roo?</title>

    <para xml:lang="es"><citation xml:lang="es"><author>
        <personname>Ben Alex</personname>
      </author> "Roo es un pequeño genio que observa desde un segundo plano y
    gestiona todo aquello de lo que no me quiero preocupar" </citation></para>

    <para xml:lang="es">Spring Roo es un entorno de trabajo Java que permite
    el desarrollo de aplicaciones web de forma rápida y cómoda para el
    desarrollador. Sus principales características son:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Generación de código en Java (lenguaje
        estático)</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Eliminar el trabajo tedioso centrando el
        desarrollo en la lógica de negocio.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Convención sobre configuración.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Desarrollo dirigido por el dominio (Domain-Driven
        Development).</para>

        <itemizedlist>
          <listitem>
            <para xml:lang="es">Diseño dirigido por el modelo de
            entidades.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Lógica en las entidades (Real Object
            Oriented), elimina capas redundantes.</para>
          </listitem>

          <listitem>
            <para xml:lang="es">Otras capas opcionales (servicios, DAOs,
            ...).</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para xml:lang="es">Crea un proyecto en segundos.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Realimentación: añade valor durante todo el ciclo
        de vida.</para>
      </listitem>

      <listitem>
        <para>No incorpora elementos adicionales al entorno de ejecución, por
        lo que no penaliza la velocidad de la aplicación.</para>
      </listitem>

      <listitem>
        <para>No requiere ningún IDE.</para>
      </listitem>

      <listitem>
        <para>Recibe instrucciones a través de una consola interactiva con
        autocompletado y ayuda en línea.</para>
      </listitem>

      <listitem>
        <para>Extensible usando <emphasis>bundles OSGi</emphasis>.</para>
      </listitem>

      <listitem>
        <para>Aprovecha el conocimiento: no necesita más conocimiento que el
        necesario para el desarrollo de aplicaciones JEE.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title xml:lang="es">Arquitectura</title>

    <para xml:lang="es">Spring Roo se centra en el desarrollo de aplicaciones
    escritas en Java para entornos corporativos.</para>

    <para xml:lang="es">La arquitectura de Roo se subdivide en 2 grandes
    bloques: el entorno de desarrollo y el entorno de ejecución</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">El entorno de desarrollo incorpora distintas
        herramientas enfocadas al desarrollo rápido de aplicaciones Java. La
        característica más importante del entorno de desarrollo es que no
        introduce ningún tipo de librería propia de Roo, de tal forma que en
        tiempo de ejecución no añade sobre coste de rendimiento a las
        aplicaciones.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">El entorno de ejecución es un entorno típico de
        aplicaciones basadas en Spring 3: acceso a bases de datos relacionales
        usando el API Java Persistence (JPA), inyección de dependencias,
        gestión de transacciones propia de Spring, pruebas unitarias con
        JUnit, configuración Maven para construir las aplicaciones y vistas
        JSP usando Spring MVC como front-end. Este tipo de aplicaciones
        basadas en Spring son probablemente las aplicaciones Java más
        populares seguidas de JSF, Struts y GWT según el <link
        xlink:href="http://twitpic.com/9mgnd5">Developer Productivity Report
        2012</link>.</para>

        <para xml:lang="es">Así mismo, en el entorno de ejecución permite
        utilizar, además de Spring MVC, otras tecnologías de visualización
        tales como Flex, GWT, JSF y Vaadin.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Es importante destacar que Roo no impone ninguna
    restrición sobre el tipo de aplicaciones que se pueden generar con este
    entorno. Algunos ejemplos de las funcionalidades que se pueden cubrir
    fácilmente con la versión actual son (notar que no están limitados
    únicamente a estas):</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Intercambio de mensajes por JMS o envío por SMTP.
        </para>
      </listitem>

      <listitem>
        <para xml:lang="es">Capa de servicios opcional con posibilidad de
        acceso remoto para clientes RIA.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Ejecución de acciones predefinidas contra la base
        de datos.</para>
      </listitem>
    </itemizedlist>

    <para xml:lang="es">Una de las mayores diferencias entre Spring Roo y las
    aplicaciones tradicionales generadas a mano es que, por defecto, Roo no
    añade capas de abstracción innecesarias. Las aplicaciones Java más
    tradicionales tienen una capa DAO, capas de servicios, capa de dominio y
    una capa de control. En una aplicación típica de Roo inicialmente solo se
    usa una <link linkend="guia-desarrollo_gestion-entidades">capa de
    Entidad</link> (que es similar a la capa de dominio) y una <link
    linkend="guia-desarrollo_capa-web">capa Web</link>. Como se indica en la
    lista anterior, si fuera necesario se podría añadir una capa de Servicios
    y/o DAO si fuese necesario.</para>

    <para xml:lang="es">Aquí podemos ver un diagrama de los componentes de la
    arquitectura de Roo, capas y tecnologías relacionadas:</para>

    <figure>
      <title xml:lang="es">Diagrama Arquitectura</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/gvnix-arquitectura-v1.0.png"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title xml:lang="es">El intérprete de comandos</title>

    <para>Para que el entorno empiece a funcionar, hay que arrancar un
    intérprete de comandos (<emphasis>Roo shell</emphasis>) con el que
    interactuaremos con el entorno de desarrollo. Este intérprete de comandos
    tiene dos funciones básicas:</para>

    <itemizedlist>
      <listitem>
        <para>Ejecutar las órdenes indicadas por el desarrollador.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>Monitorizar cualquier cambio en el proyecto para reajustar el
        código generado.</para>
      </listitem>
    </itemizedlist>

    <para>La consola tiene este aspecto:</para>

    <programlisting>    ____  ____  ____  
   / __ \/ __ \/ __ \ 
  / /_/ / / / / / / / 
 / _, _/ /_/ / /_/ /  
/_/ |_|\____/\____/    1.x.x-RELEASE

Welcome to Spring Roo. For assistance press TAB or type "hint" then hit ENTER.
roo-gvNIX&gt;</programlisting>
  </section>

  <section>
    <title xml:lang="es">¿Cómo funciona Roo?</title>

    <para>Este diagrama muestra a alto nivel el modelo funcional de
    Roo:</para>

    <figure xml:lang="es">
      <title xml:lang="es">Diagrama de modelo funcional de Roo</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/modelo-roo.png"/>
        </imageobject>
      </mediaobject>
    </figure>

    <variablelist>
      <varlistentry>
        <term xml:lang="es">Proyecto Java</term>

        <listitem>
          <para xml:lang="es">Es el contenido de nuestra aplicación formada
          por todos los archivos necesarios.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term xml:lang="es">Infraestructura de Roo</term>

        <listitem>
          <para xml:lang="es">Toda la infraestructura de Roo que forma el
          entorno de desarrollo, autocontenida y separada del proyecto final.
          Se compone de:</para>

          <variablelist>
            <varlistentry>
              <term xml:lang="es">Add-ons</term>

              <listitem>
                <para xml:lang="es">Componentes que automáticamente
                monitorizan y realizan cambios en nuestro proyecto.</para>

                <para>También ofrecen un conjunto de comandos para que los
                desarrolladores puedan realizar operaciones a través del
                intérprete de comandos.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term xml:lang="es">Intérprete de comandos (Shell)</term>

              <listitem>
                <para xml:lang="es">Componente que permite la recepción y
                ejecución de órdenes del desarrollador</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term xml:lang="es">STS: SpringSource Tool Suite</term>

              <listitem>
                <para xml:lang="es">Plugin/Aplicación Eclipse de SpringSource
                para trabajar con proyectos Spring. Entre otras, dispone de
                herramientas para trabajar con Roo.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term xml:lang="es">Anotaciones</term>

        <listitem>
          <para xml:lang="es">Conjunto de <link
          xlink:href="http://hartocodigo.blogspot.com/2009/02/anotaciones-en-java-5.html">anotaciones
          JAVA</link> que utiliza Roo para poder identificar un tipo de
          artefacto concreto y su configuración. Tienen una política de
          retención <emphasis>SOURCE</emphasis> por lo que el compilador Java
          no las incluirá en la clases compiladas.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section>
      <title xml:lang="es">Generación de código</title>

      <para xml:lang="es"><emphasis>Spring Roo s un generador de código
      híbrido, puesto que intenta combinar lo mejor de los modelos de
      generación pasiva y activa.</emphasis></para>

      <itemizedlist>
        <listitem>
          <para>Generación pasiva: el desarrollador indica a la herramienta
          qué es lo que debe generar, y una vez generado finaliza el trabajo
          de la herramienta. No se asume un mantenimiento a largo plazo del
          código generado. El desarrollador interactúa mediante el intérprete
          de comandos, desde ahí se realiza y termina el proceso de generación
          de código, que genera archivos xml y java.</para>
        </listitem>

        <listitem>
          <para>Generación activa: Es una realimentación automática que genera
          un modelo detallado de metadatos con la ayuda de las anotaciones
          @Roo y @GvNIX e incrementalmente actualiza archivos aj y jsp.
          Permite mantener automáticamente elementos del proyecto en respuesta
          a cambios, este tipo de generación nunca modifica archivos java,
          estos solo se modifican por indicación expresa del desarrollador y
          solo a través del intérprete de comandos.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title xml:lang="es">Usabilidad</title>

    <para xml:lang="es">La usabilidad es un factor clave en el entorno de
    trabajo. Entre las principales características de usabilidad
    encontramos:</para>

    <itemizedlist>
      <listitem>
        <para xml:lang="es">Comandos <emphasis>hint</emphasis> y
        <emphasis>help</emphasis>: Guían al usuario sobre la forma de
        proceder</para>
      </listitem>

      <listitem>
        <para xml:lang="es"><emphasis>TAB</emphasis> para completar
        prácticamente cualquier comando.</para>

        <para>Pulsando <emphasis>TAB</emphasis> Roo sugiere que hacer a
        continuación, que comando se puede utilizar a continuación, incluso
        pulsando algún caracter qué comandos que empiezan por ese caracter se
        pueden utilizar.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Si se produce algún error en alguna operación, Roo
        deshará todos los cambios generados dejando la aplicación como
        estaba.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Ejecución de <emphasis>scripts</emphasis>: Se
        puede guardar una secuencia de comandos en un archivo de texto y
        ejecutarlos en bloque cuantas veces se necesite. Por ejemplo, podemos
        hacer un guión para crear una aplicación completa y ejecutarlo en el
        intérprete de Roo.</para>
      </listitem>

      <listitem>
        <para xml:lang="es">Funcionamiento predictivo y conservador: Al
        ejecutarse en segundo plano debe ser un entorno conservador en el
        sentido que si no cambia nada en el proyecto no debe tocar nada, el
        desarrollador no debe perder nunca el control del proyecto.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
